{"version":3,"sources":["webpack://@amcharts/amcharts5/./node_modules/polylabel/polylabel.js","webpack://@amcharts/amcharts5/./node_modules/tinyqueue/index.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/length.js","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapSeries.ts","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/distance.js","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapLine.ts","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/interpolate.js","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapLineSeries.ts","webpack://@amcharts/amcharts5/./node_modules/d3-array/src/range.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/graticule.js","webpack://@amcharts/amcharts5/./src/.internal/charts/map/GraticuleSeries.ts","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/path/area.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/path/centroid.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/path/context.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/path/measure.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/path/string.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/centroid.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/area.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/bounds.js","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapUtils.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapChart.ts","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/path/index.js","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapPointSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapPolygon.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/map/MapPolygonSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/map/ZoomControl.ts","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/orthographic.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/equirectangular.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/conic.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/azimuthal.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/albersUsa.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/albers.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/equalEarth.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/naturalEarth1.js","webpack://@amcharts/amcharts5/./tmp/webpack/map.js"],"names":["Queue","polylabel","polygon","precision","debug","minX","minY","maxX","maxY","i","length","p","width","height","cellSize","Math","min","h","degeneratePoleOfInaccessibility","distance","cellQueue","undefined","compareMax","x","y","push","Cell","bestCell","area","points","len","j","a","b","f","getCentroidCell","bboxCell","d","numProbes","cell","pop","console","log","round","max","poleOfInaccessibility","this","inside","minDistSq","Infinity","k","ring","getSegDistSq","sqrt","pointToPolygonDist","SQRT2","px","py","dx","dy","t","default","module","exports","TinyQueue","data","compare","defaultCompare","_down","item","_up","top","bottom","pos","parent","current","halfLength","left","best","right","lengthSum","lambda0","sinPhi0","cosPhi0","fields","_setRawDefault","_afterNew","_prepareChildren","_valuesDirty","isDirty","geoJSON","get","previous","_prevSettings","_geoJSONparsed","clear","_parseGeoJSON","id","includes","excludes","indexOf","features","type","geometry","feature","_types","checkInclude","dataItem","dataItems","value","dataObject","dataContext","geometryType","set","processDataItem","madeFromGeoData","properties","events","isEnabled","dispatch","target","_chart","children","moveValue","bulletsContainer","chart","getPrivate","_geometries","markDirtyGeometries","Series","MapSeries","className","lengthStream","sphere","noop","point","lineStart","lengthPointFirst","lineEnd","lengthLineEnd","polygonStart","polygonEnd","lambda","phi","lengthPoint","sinPhi","cosPhi","delta","cosDelta","z","add","object","stream","coordinates","_beforeChanged","_projectionDirty","clipAngle","_clear","_display","context","markDirty","_clearDirty","position","totalDistance","currentDistance","positionA","positionB","pointA","pointB","segments","s","segment","positionAB","x0","y0","x1","y1","cy0","sy0","cy1","sy1","kx0","ky0","kx1","ky1","interpolate","B","A","longitude","latitude","Graphics","MapLine","List","Template","_root","mapLines","template","mapLine","make","_setDataItem","markDirtyProjection","makeMapLine","pointsToConnect","on","_markDirtyValues","setPrivate","coords","setRaw","disposeDataItem","removeValue","dispose","classNames","concat","MapLineSeries","start","stop","step","n","arguments","ceil","range","Array","graticuleX","map","graticuleY","x00","y00","makeDataItem","_dataItem","_generate","_updateChildren","graticule","X1","X0","Y1","Y0","X","Y","DX","DY","lines","filter","outline","slice","reverse","extent","_","extentMajor","extentMinor","stepMajor","stepMinor","GraticuleSeries","areaSum","areaRingSum","areaStream","areaRingStart","areaRingEnd","result","areaPointFirst","areaPoint","Z0","Z1","X2","Y2","Z2","centroidStream","centroidPoint","centroidLineStart","centroidLineEnd","centroidRingStart","centroidRingEnd","centroid","NaN","centroidPointFirstLine","centroidPointLine","centroidPointFirstRing","centroidPointRing","PathContext","_context","prototype","_radius","pointRadius","_line","_point","closePath","moveTo","lineTo","arc","lengthRing","PathString","_string","circle","radius","_circle","join","W0","W1","lambda00","phi00","z0","centroidPointCartesian","centroidLinePointFirst","centroidLinePoint","w","centroidRingPointFirst","centroidRingPoint","cx","cy","cz","m","v","areaRing","dLambda","sdLambda","adLambda","u","phi0","lambda1","phi1","lambda2","p0","deltaSum","ranges","boundsStream","boundsPoint","boundsLineStart","boundsLineEnd","boundsRingPoint","boundsRingStart","boundsRingEnd","linePoint","cartesian","normal","equatorial","inflection","phii","sign","lambdai","antimeridian","angle","rangeCompare","rangeContains","getGeoCircle","geoPoint","center","getGeoCentroid","getGeoBounds","bounds","merged","deltaMax","sort","getGeoRectangle","north","east","south","west","multiPolygon","stepLong","stepLat","ln","surface","ll","lt","normalizeGeoPoint","wrapAngleTo180","asin","sin","latitude180","abs","geometries","projection","path","projectionStream","contextStream","apply","measure","identity","setPrivateRaw","_geoCentroid","_geoBounds","wheelX","wheelY","chartContainer","_wheelDp","event","wheelEasing","wheelSensitivity","wheelDuration","wheelEvent","originalEvent","toLocal","_handleWheelZoom","deltaY","_handleWheelRotateY","_handleWheelRotateX","deltaX","_disposers","innerWidth","innerHeight","_makeGeoPath","_fitMap","scale","rotate","prev","hw","hh","invert","centerLocation","xy","translate","xx","yy","_handleSetWheel","_dirtyGeometries","_geometryColection","series","each","isPrivateDirty","fitSize","newScale","_centerLocation","zoomControl","_disposeProperty","_dispatchBounds","duration","homeGeoPoint","homeZoomLevel","zoomToGeoPoint","_mapBounds","prevGeoBounds","_prevGeoBounds","_settings","themeTags","seriesContainer","Rectangle","fill","Color","fillOpacity","_handleChartDown","_handleChartUp","_handleChartMove","license","match","_showBranding","_downZoomLevel","count","_downPoints","_downTranslateX","_downTranslateY","_downRotationX","_downRotationY","_downRotationZ","downId","_getDownPointId","movePoint","_movePoints","bg","enableType","_za","_txa","_tya","_rxa","_rya","downPoint","l0","l1","_pLon","_pLat","_event","downPoints","movePoints","display","downPoint0","downPoint1","movePoint0","movePoint1","initialDistance","hypot","level","moveCenter","downCenter","tx","ty","zoomLevel","_getDownPoint","downPointId","pointerId","_handlePinch","panX","panY","local","disableType","downLocation","location","easing","animate","key","to","newZoomLevel","zoomToPoint","geoBounds","mapBounds","convert","p1","zl","readerAlert","_t","locale","SerialChart","MapChart","_positionBullets","bullets","bulletFunction","_makeBullet","bullet","sprite","lineDataItem","isType","lineDI","getDataItemById","polygonDataItem","polygonDI","positionOnLine","visualCentroid","positionToGeoPoint","geoPoint0","geoPoint1","point0","point1","_positionBulletReal","index","_index","geoPath","visible","MapPointSeries","isHover","showTooltip","biggestArea","MapPolygon","mapPolygons","mapPolygon","makeMapPolygon","_addGeometry","_removeGeometry","zoomToGeoBounds","MapPolygonSeries","Button","verticalLayout","plusButton","setAll","icon","layout","minusButton","_prevPrivateSettings","_disposer","zoomIn","zoomOut","Container","ZoomControl","orthographicRaw","equirectangularRaw","conicEqualAreaRaw","forward","cylindricalEqualAreaRaw","c","r0","project","r","r0y","l","pi","projectAt","parallels","conicProjection","sc","cc","azimuthalInvert","cache","cacheStream","lower48Point","alaskaPoint","hawaiiPoint","lower48","conicEqualArea","alaska","hawaii","pointStream","albersUsa","reset","streams","clipExtent","fitExtent","fit","size","fitWidth","fitHeight","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","naturalEarth1Raw","phi2","phi4","am5map"],"mappings":"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","file":"map.js","sourcesContent":["'use strict';\n\nvar Queue = require('tinyqueue');\n\nif (Queue.default) Queue = Queue.default; // temporary webpack fix\n\nmodule.exports = polylabel;\nmodule.exports.default = polylabel;\n\nfunction polylabel(polygon, precision, debug) {\n    precision = precision || 1.0;\n\n    // find the bounding box of the outer ring\n    var minX, minY, maxX, maxY;\n    for (var i = 0; i < polygon[0].length; i++) {\n        var p = polygon[0][i];\n        if (!i || p[0] < minX) minX = p[0];\n        if (!i || p[1] < minY) minY = p[1];\n        if (!i || p[0] > maxX) maxX = p[0];\n        if (!i || p[1] > maxY) maxY = p[1];\n    }\n\n    var width = maxX - minX;\n    var height = maxY - minY;\n    var cellSize = Math.min(width, height);\n    var h = cellSize / 2;\n\n    if (cellSize === 0) {\n        var degeneratePoleOfInaccessibility = [minX, minY];\n        degeneratePoleOfInaccessibility.distance = 0;\n        return degeneratePoleOfInaccessibility;\n    }\n\n    // a priority queue of cells in order of their \"potential\" (max distance to polygon)\n    var cellQueue = new Queue(undefined, compareMax);\n\n    // cover polygon with initial cells\n    for (var x = minX; x < maxX; x += cellSize) {\n        for (var y = minY; y < maxY; y += cellSize) {\n            cellQueue.push(new Cell(x + h, y + h, h, polygon));\n        }\n    }\n\n    // take centroid as the first best guess\n    var bestCell = getCentroidCell(polygon);\n\n    // special case for rectangular polygons\n    var bboxCell = new Cell(minX + width / 2, minY + height / 2, 0, polygon);\n    if (bboxCell.d > bestCell.d) bestCell = bboxCell;\n\n    var numProbes = cellQueue.length;\n\n    while (cellQueue.length) {\n        // pick the most promising cell from the queue\n        var cell = cellQueue.pop();\n\n        // update the best cell if we found a better one\n        if (cell.d > bestCell.d) {\n            bestCell = cell;\n            if (debug) console.log('found best %d after %d probes', Math.round(1e4 * cell.d) / 1e4, numProbes);\n        }\n\n        // do not drill down further if there's no chance of a better solution\n        if (cell.max - bestCell.d <= precision) continue;\n\n        // split the cell into four cells\n        h = cell.h / 2;\n        cellQueue.push(new Cell(cell.x - h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y - h, h, polygon));\n        cellQueue.push(new Cell(cell.x - h, cell.y + h, h, polygon));\n        cellQueue.push(new Cell(cell.x + h, cell.y + h, h, polygon));\n        numProbes += 4;\n    }\n\n    if (debug) {\n        console.log('num probes: ' + numProbes);\n        console.log('best distance: ' + bestCell.d);\n    }\n\n    var poleOfInaccessibility = [bestCell.x, bestCell.y];\n    poleOfInaccessibility.distance = bestCell.d;\n    return poleOfInaccessibility;\n}\n\nfunction compareMax(a, b) {\n    return b.max - a.max;\n}\n\nfunction Cell(x, y, h, polygon) {\n    this.x = x; // cell center x\n    this.y = y; // cell center y\n    this.h = h; // half the cell size\n    this.d = pointToPolygonDist(x, y, polygon); // distance from cell center to polygon\n    this.max = this.d + this.h * Math.SQRT2; // max distance to polygon within a cell\n}\n\n// signed distance from point to polygon outline (negative if point is outside)\nfunction pointToPolygonDist(x, y, polygon) {\n    var inside = false;\n    var minDistSq = Infinity;\n\n    for (var k = 0; k < polygon.length; k++) {\n        var ring = polygon[k];\n\n        for (var i = 0, len = ring.length, j = len - 1; i < len; j = i++) {\n            var a = ring[i];\n            var b = ring[j];\n\n            if ((a[1] > y !== b[1] > y) &&\n                (x < (b[0] - a[0]) * (y - a[1]) / (b[1] - a[1]) + a[0])) inside = !inside;\n\n            minDistSq = Math.min(minDistSq, getSegDistSq(x, y, a, b));\n        }\n    }\n\n    return minDistSq === 0 ? 0 : (inside ? 1 : -1) * Math.sqrt(minDistSq);\n}\n\n// get polygon centroid\nfunction getCentroidCell(polygon) {\n    var area = 0;\n    var x = 0;\n    var y = 0;\n    var points = polygon[0];\n\n    for (var i = 0, len = points.length, j = len - 1; i < len; j = i++) {\n        var a = points[i];\n        var b = points[j];\n        var f = a[0] * b[1] - b[0] * a[1];\n        x += (a[0] + b[0]) * f;\n        y += (a[1] + b[1]) * f;\n        area += f * 3;\n    }\n    if (area === 0) return new Cell(points[0][0], points[0][1], 0, polygon);\n    return new Cell(x / area, y / area, 0, polygon);\n}\n\n// get squared distance from a point to a segment\nfunction getSegDistSq(px, py, a, b) {\n\n    var x = a[0];\n    var y = a[1];\n    var dx = b[0] - x;\n    var dy = b[1] - y;\n\n    if (dx !== 0 || dy !== 0) {\n\n        var t = ((px - x) * dx + (py - y) * dy) / (dx * dx + dy * dy);\n\n        if (t > 1) {\n            x = b[0];\n            y = b[1];\n\n        } else if (t > 0) {\n            x += dx * t;\n            y += dy * t;\n        }\n    }\n\n    dx = px - x;\n    dy = py - y;\n\n    return dx * dx + dy * dy;\n}\n","\nexport default class TinyQueue {\n    constructor(data = [], compare = defaultCompare) {\n        this.data = data;\n        this.length = this.data.length;\n        this.compare = compare;\n\n        if (this.length > 0) {\n            for (let i = (this.length >> 1) - 1; i >= 0; i--) this._down(i);\n        }\n    }\n\n    push(item) {\n        this.data.push(item);\n        this.length++;\n        this._up(this.length - 1);\n    }\n\n    pop() {\n        if (this.length === 0) return undefined;\n\n        const top = this.data[0];\n        const bottom = this.data.pop();\n        this.length--;\n\n        if (this.length > 0) {\n            this.data[0] = bottom;\n            this._down(0);\n        }\n\n        return top;\n    }\n\n    peek() {\n        return this.data[0];\n    }\n\n    _up(pos) {\n        const {data, compare} = this;\n        const item = data[pos];\n\n        while (pos > 0) {\n            const parent = (pos - 1) >> 1;\n            const current = data[parent];\n            if (compare(item, current) >= 0) break;\n            data[pos] = current;\n            pos = parent;\n        }\n\n        data[pos] = item;\n    }\n\n    _down(pos) {\n        const {data, compare} = this;\n        const halfLength = this.length >> 1;\n        const item = data[pos];\n\n        while (pos < halfLength) {\n            let left = (pos << 1) + 1;\n            let best = data[left];\n            const right = left + 1;\n\n            if (right < this.length && compare(data[right], best) < 0) {\n                left = right;\n                best = data[right];\n            }\n            if (compare(best, item) >= 0) break;\n\n            data[pos] = best;\n            pos = left;\n        }\n\n        data[pos] = item;\n    }\n}\n\nfunction defaultCompare(a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n}\n","import {Adder} from \"d3-array\";\nimport {abs, atan2, cos, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar lengthSum,\n    lambda0,\n    sinPhi0,\n    cosPhi0;\n\nvar lengthStream = {\n  sphere: noop,\n  point: noop,\n  lineStart: lengthLineStart,\n  lineEnd: noop,\n  polygonStart: noop,\n  polygonEnd: noop\n};\n\nfunction lengthLineStart() {\n  lengthStream.point = lengthPointFirst;\n  lengthStream.lineEnd = lengthLineEnd;\n}\n\nfunction lengthLineEnd() {\n  lengthStream.point = lengthStream.lineEnd = noop;\n}\n\nfunction lengthPointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, sinPhi0 = sin(phi), cosPhi0 = cos(phi);\n  lengthStream.point = lengthPoint;\n}\n\nfunction lengthPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      delta = abs(lambda - lambda0),\n      cosDelta = cos(delta),\n      sinDelta = sin(delta),\n      x = cosPhi * sinDelta,\n      y = cosPhi0 * sinPhi - sinPhi0 * cosPhi * cosDelta,\n      z = sinPhi0 * sinPhi + cosPhi0 * cosPhi * cosDelta;\n  lengthSum.add(atan2(sqrt(x * x + y * y), z));\n  lambda0 = lambda, sinPhi0 = sinPhi, cosPhi0 = cosPhi;\n}\n\nexport default function(object) {\n  lengthSum = new Adder();\n  stream(object, lengthStream);\n  return +lengthSum;\n}\n","import type { MapChart } from \"./MapChart\";\nimport type { GeoProjection, GeoPath } from \"d3-geo\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate, ISeriesEvents } from \"../../core/render/Series\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $object from \"../../core/util/Object\";\n\nexport interface IMapSeriesDataItem extends ISeriesDataItem {\n\tgeometry?: GeoJSON.Geometry;\n\tgeometryType?: GeoJSON.GeoJsonGeometryTypes;\n\tvalue?: number;\n}\n\nexport interface IMapSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * Map data in GeoJSON format.\n\t */\n\tgeoJSON?: GeoJSON.GeoJSON;\n\n\t/**\n\t * An array of map object ids from geodata to include in the map.\n\t *\n\t * If set, only those objects listed in `include` will be shown.\n\t */\n\tinclude?: Array<string>;\n\n\t/**\n\t * An array of map object ids from geodata to omit when showing the map.\n\t */\n\texclude?: Array<string>;\n\n\t/**\n\t * A field in series `data` that will hold map object's numeric value.\n\t *\n\t * It can be used in a number of places, e.g. tooltips, heat rules, etc.\n\t */\n\tvalueField?: string;\n\n\t/**\n\t * @ignore\n\t */\n\tgeometryField?: string;\n\n\t/**\n\t * @ignore\n\t */\n\tgeometryTypeField?: string;\n}\n\nexport interface IMapSeriesPrivate extends ISeriesPrivate {\n}\n\nexport interface IMapSeriesEvents extends ISeriesEvents {\n\n\t/**\n\t * Invoked when geodata is finished loading and processed.\n\t */\n\tgeodataprocessed: {};\n\n}\n\n/**\n * Base class for map series.\n */\nexport abstract class MapSeries extends Series {\n\tpublic static className: string = \"MapSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([MapSeries.className]);\n\n\tdeclare public chart: MapChart | undefined;\n\tdeclare public _settings: IMapSeriesSettings;\n\tdeclare public _privateSettings: IMapSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapSeriesDataItem;\n\tdeclare public _events: IMapSeriesEvents;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [];\n\n\tpublic _geometries: Array<GeoJSON.Geometry> = [];\n\tprotected _geoJSONparsed: boolean = false;\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"geometry\", \"geometryType\");\n\t\tthis._setRawDefault(\"geometryField\", \"geometry\");\n\t\tthis._setRawDefault(\"geometryTypeField\", \"geometryType\");\n\t\tthis._setRawDefault(\"idField\", \"id\");\n\n\t\tsuper._afterNew();\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this._valuesDirty || this.isDirty(\"geoJSON\") || this.isDirty(\"include\") || this.isDirty(\"exclude\")) {\n\t\t\tconst geoJSON = this.get(\"geoJSON\");\n\t\t\tlet previous = this._prevSettings.geoJSON;\n\n\t\t\tif (previous && previous != geoJSON) {\n\t\t\t\tthis._prevSettings.geoJSON = undefined;\n\t\t\t\tthis._geoJSONparsed = false;\n\t\t\t\tthis.data.clear();\n\t\t\t}\n\n\t\t\tif (!this._geoJSONparsed) {\n\t\t\t\tthis._parseGeoJSON();\n\t\t\t\tthis._geoJSONparsed = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected checkInclude(id: string, includes: string[] | undefined, excludes?: string[] | undefined): boolean {\n\t\tif (includes) {\n\t\t\tif (includes.length == 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (includes.indexOf(id) == -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (excludes && excludes.length > 0) {\n\t\t\tif (excludes.indexOf(id) != -1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected _parseGeoJSON() {\n\n\t\tconst geoJSON = this.get(\"geoJSON\");\n\t\tif (geoJSON) {\n\n\t\t\tlet features!: any[];\n\n\t\t\tif (geoJSON.type == \"FeatureCollection\") {\n\t\t\t\tfeatures = geoJSON.features;\n\t\t\t}\n\t\t\telse if (geoJSON.type == \"Feature\") {\n\t\t\t\tfeatures = [geoJSON];\n\t\t\t}\n\t\t\telse if ([\"Point\", \"LineString\", \"Polygon\", \"MultiPoint\", \"MultiLineString\", \"MultiPolygon\"].indexOf(geoJSON.type) != -1) {\n\t\t\t\tfeatures = [{ geometry: geoJSON }];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconsole.log(\"nothing found in geoJSON\");\n\t\t\t}\n\n\t\t\tif (features) {\n\n\t\t\t\tfor (let i = 0, len = features.length; i < len; i++) {\n\t\t\t\t\tlet feature: any = features[i];\n\t\t\t\t\tlet geometry: any = feature.geometry;\n\n\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\tlet type = geometry.type;\n\t\t\t\t\t\tlet id: string = feature.id;\n\n\t\t\t\t\t\t// @todo\n\t\t\t\t\t\t//if (this.chart.geodataNames && this.chart.geodataNames[id]) {\n\t\t\t\t\t\t//\tfeature.properties.name = this.chart.geodataNames[id];\n\t\t\t\t\t\t//}\n\n\t\t\t\t\t\tif (this._types.indexOf(type) != -1) {\n\t\t\t\t\t\t\tif (!this.checkInclude(id, this.get(\"include\"), this.get(\"exclude\"))) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet dataItem: any;\n\n\t\t\t\t\t\t\tif (id != null) {\n\t\t\t\t\t\t\t\t// find data object in user-provided data\n\t\t\t\t\t\t\t\tdataItem = $array.find(this.dataItems, (value: any) => {\n\t\t\t\t\t\t\t\t\treturn value.get(\"id\") == id;\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet dataObject: any;\n\n\t\t\t\t\t\t\tif (dataItem) {\n\t\t\t\t\t\t\t\tdataObject = dataItem.dataContext;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// create one if not found\n\t\t\t\t\t\t\tif (!dataItem) {\n\t\t\t\t\t\t\t\tdataObject = { geometry: geometry, geometryType: type, id: id, madeFromGeoData: true };\n\t\t\t\t\t\t\t\tthis.data.push(dataObject);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// in case found\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t// if user-provided object doesn't have points data provided in any way:\n\t\t\t\t\t\t\t\tif (!dataObject.geometry) {\n\t\t\t\t\t\t\t\t\tdataObject.geometry = geometry;\n\t\t\t\t\t\t\t\t\tdataObject.geometryType = type;\n\t\t\t\t\t\t\t\t\tdataItem.set(\"geometry\", geometry);\n\t\t\t\t\t\t\t\t\tdataItem.set(\"geometryType\", type);\n\t\t\t\t\t\t\t\t\tthis.processDataItem(dataItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// copy properties data to datacontext\n\t\t\t\t\t\t\t$object.softCopyProperties(feature.properties, dataObject);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst type = \"geodataprocessed\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic abstract markDirtyProjection(): void\n\n\tpublic _placeBulletsContainer(_chart: MapChart) {\n\t\tthis.children.moveValue(this.bulletsContainer);\n\t}\n\n\tpublic _removeBulletsContainer() {\n\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic projection(): GeoProjection | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.get(\"projection\");\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic geoPath(): GeoPath | undefined {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\treturn chart.getPrivate(\"geoPath\");\n\t\t}\n\t}\n\n\tprotected _addGeometry(geometry: any) {\n\t\tif (geometry) {\n\t\t\tthis._geometries.push(geometry);\n\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.markDirtyGeometries();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _removeGeometry(geometry: any) {\n\t\tif (geometry) {\n\t\t\t$array.remove(this._geometries, geometry);\n\n\t\t\tconst chart = this.chart;\n\t\t\tif (chart) {\n\t\t\t\tchart.markDirtyGeometries();\n\t\t\t}\n\t\t}\n\t}\n}\n","import length from \"./length.js\";\n\nvar coordinates = [null, null],\n    object = {type: \"LineString\", coordinates: coordinates};\n\nexport default function(a, b) {\n  coordinates[0] = a;\n  coordinates[1] = b;\n  return length(object);\n}\n","import type { MapLineSeries } from \"./MapLineSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\n\nimport { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport { geoLength, geoInterpolate, geoDistance } from \"d3-geo\";\n\nexport interface IMapLineSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n\n}\n\nexport interface IMapLinePrivate extends IGraphicsPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tseries: MapLineSeries;\n\n}\n\n/**\n * A line object in a [[MapLineSeries]].\n */\nexport class MapLine extends Graphics {\n\n\tdeclare public _settings: IMapLineSettings;\n\tdeclare public _privateSettings: IMapLinePrivate;\n\n\tpublic static className: string = \"MapLine\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapLine.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.getPrivate(\"series\");\n\t\t\t\tif (series) {\n\t\t\t\t\tconst chart = series.chart;\n\t\t\t\t\tif (chart) {\n\t\t\t\t\t\tconst projection = chart.get(\"projection\");\n\t\t\t\t\t\tlet clipAngle: number | null = null;\n\n\t\t\t\t\t\tif (projection) {\n\t\t\t\t\t\t\tclipAngle = projection.clipAngle();\n\t\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\t\t\t\tif (geoPath) {\n\t\t\t\t\t\t\tthis._clear = true;\n\n\t\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\t\tif (projection && series.get(\"clipBack\") === false) {\n\t\t\t\t\t\t\t\t\tprojection.clipAngle(180);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\t\tgeoPath.context(null);\n\n\t\t\t\t\t\t\t\tif (projection) {\n\t\t\t\t\t\t\t\t\tprojection.clipAngle(clipAngle as any);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\t/**\n\t * Converts relative position along the line (0-1) into pixel coordinates.\n\t *\n\t * @param position  Position (0-1)\n\t * @return Coordinates\n\t */\n\tpublic positionToGeoPoint(position: number): IGeoPoint {\n\n\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tlet totalDistance: number = geoLength(geometry);\n\t\t\tlet currentDistance: number = 0;\n\n\t\t\tlet distanceAB: number;\n\t\t\tlet positionA: number = 0;\n\t\t\tlet positionB: number = 0;\n\t\t\tlet pointA!: [number, number];\n\t\t\tlet pointB!: [number, number];\n\n\t\t\tlet coordinates = geometry.coordinates;\n\t\t\tif (coordinates) {\n\n\t\t\t\tlet segments!: number[][][];\n\n\t\t\t\tif (geometry.type == \"LineString\") {\n\t\t\t\t\tsegments = [coordinates] as number[][][];\n\t\t\t\t}\n\t\t\t\telse if (geometry.type == \"MultiLineString\") {\n\t\t\t\t\tsegments = coordinates as number[][][];\n\t\t\t\t}\n\n\t\t\t\tfor (let s = 0; s < segments.length; s++) {\n\t\t\t\t\tlet segment = segments[s];\n\t\t\t\t\tif (segment.length > 1) {\n\t\t\t\t\t\tfor (let p = 1; p < segment.length; p++) {\n\t\t\t\t\t\t\tpointA = segment[p - 1] as [number, number];\n\t\t\t\t\t\t\tpointB = segment[p] as [number, number];\n\n\t\t\t\t\t\t\tpositionA = currentDistance / totalDistance;\n\t\t\t\t\t\t\tdistanceAB = geoDistance(pointA, pointB);\n\t\t\t\t\t\t\tcurrentDistance += distanceAB;\n\t\t\t\t\t\t\tpositionB = currentDistance / totalDistance;\n\n\t\t\t\t\t\t\tif (positionA <= position && positionB > position) {\n\t\t\t\t\t\t\t\ts = segments.length;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse if (segment.length == 1) {\n\t\t\t\t\t\tpointA = segment[0] as [number, number];;\n\t\t\t\t\t\tpointB = segment[0] as [number, number];;\n\t\t\t\t\t\tpositionA = 0;\n\t\t\t\t\t\tpositionB = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (pointA && pointB) {\n\t\t\t\t\tlet positionAB: number = (position - positionA) / (positionB - positionA);\n\t\t\t\t\tlet location = geoInterpolate(pointA, pointB)(positionAB);\n\t\t\t\t\treturn { longitude: location[0], latitude: location[1] }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n}\n","import {asin, atan2, cos, degrees, haversin, radians, sin, sqrt} from \"./math.js\";\n\nexport default function(a, b) {\n  var x0 = a[0] * radians,\n      y0 = a[1] * radians,\n      x1 = b[0] * radians,\n      y1 = b[1] * radians,\n      cy0 = cos(y0),\n      sy0 = sin(y0),\n      cy1 = cos(y1),\n      sy1 = sin(y1),\n      kx0 = cy0 * cos(x0),\n      ky0 = cy0 * sin(x0),\n      kx1 = cy1 * cos(x1),\n      ky1 = cy1 * sin(x1),\n      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),\n      k = sin(d);\n\n  var interpolate = d ? function(t) {\n    var B = sin(t *= d) / k,\n        A = sin(d - t) / k,\n        x = A * kx0 + B * kx1,\n        y = A * ky0 + B * ky1,\n        z = A * sy0 + B * sy1;\n    return [\n      atan2(y, x) * degrees,\n      atan2(z, sqrt(x * x + y * y)) * degrees\n    ];\n  } : function() {\n    return [x0 * degrees, y0 * degrees];\n  };\n\n  interpolate.distance = d;\n\n  return interpolate;\n}\n","import type { IMapPointSeriesDataItem } from \"./MapPointSeries\";\nimport type { DataItem } from \"../../core/render/Component\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\nimport { MapLine } from \"./MapLine\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { Template } from \"../../core/util/Template\";\n\nimport * as $array from \"../../core/util/Array\";\n\n/**\n * @ignore\n */\nexport interface IMapLineSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapLineSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * Related [[MapLine]] object.\n\t */\n\tmapLine?: MapLine;\n\n\t/**\n\t * GeoJSON geometry of the line.\n\t */\n\tgeometry?: GeoJSON.LineString | GeoJSON.MultiLineString;\n\n\t/**\n\t * An array of data items from [[MapPointSeries]] to use as line end-points.\n\t */\n\tpointsToConnect?: Array<DataItem<IMapPointSeriesDataItem>>;\n\n}\n\nexport interface IMapLineSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * If set to `true` will hide line segments that are in the invisible range\n\t * of the map.\n\t *\n\t * For example on the side of the globe facing away from the viewer when\n\t * used with Orthographic projection.\n\t *\n\t * NOTE: not all projections have invisible side.\n\t */\n\tclipBack?: boolean;\n\n}\n\n/**\n * Creates a map series for displaying lines on the map.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-line-series/} for more info\n * @important\n */\nexport class MapLineSeries extends MapSeries {\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMapLine(dataItem: DataItem<this[\"_dataItemSettings\"]>): MapLine {\n\t\tconst mapLine = this.children.push(this.mapLines.make());\n\t\tmapLine._setDataItem(dataItem);\n\t\tthis.mapLines.push(mapLine);\n\t\treturn mapLine;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all lines in series.\n\t *\n\t * `mapLines.template` can also be used to configure lines.\n\t *\n\t * @default new ListTemplate<MapLine>\n\t */\n\tpublic readonly mapLines: ListTemplate<MapLine> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => MapLine._new(this._root, {}, [this.mapLines.template])\n\t);\n\n\tpublic static className: string = \"MapLineSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapLineSeries.className]);\n\n\tdeclare public _settings: IMapLineSeriesSettings;\n\tdeclare public _privateSettings: IMapLineSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapLineSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"LineString\", \"MultiLineString\"];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tlet mapLine = dataItem.get(\"mapLine\");\n\t\t\tif (mapLine) {\n\t\t\t\tmapLine.markDirtyProjection();\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.mapLines.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tlet mapLine = dataItem.get(\"mapLine\");\n\t\tif (!mapLine) {\n\t\t\tmapLine = this.makeMapLine(dataItem);\n\t\t}\n\n\t\tdataItem.set(\"mapLine\", mapLine);\n\t\tconst pointsToConnect = dataItem.get(\"pointsToConnect\");\n\t\tif (pointsToConnect) {\n\t\t\t$array.each(pointsToConnect, (point) => {\n\n\t\t\t\tpoint.on(\"geometry\", () => {\n\t\t\t\t\tthis._markDirtyValues(dataItem);\n\t\t\t\t})\n\n\t\t\t\tpoint.on(\"longitude\", () => {\n\t\t\t\t\tthis._markDirtyValues(dataItem);\n\t\t\t\t})\n\n\t\t\t\tpoint.on(\"latitude\", () => {\n\t\t\t\t\tthis._markDirtyValues(dataItem);\n\t\t\t\t})\n\t\t\t})\n\n\t\t\tthis._markDirtyValues(dataItem);\n\t\t}\n\n\t\tmapLine.setPrivate(\"series\", this);\n\t}\n\n\tpublic _markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._markDirtyValues();\n\t\tif (dataItem) {\n\t\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\t\tif (mapLine) {\n\t\t\t\tconst pointsToConnect = dataItem.get(\"pointsToConnect\");\n\t\t\t\tif (pointsToConnect) {\n\t\t\t\t\tlet coordinates: Array<Array<number>> = [];\n\t\t\t\t\t$array.each(pointsToConnect, (point) => {\n\t\t\t\t\t\tconst longitude = point.get(\"longitude\");\n\t\t\t\t\t\tconst latitude = point.get(\"latitude\");\n\t\t\t\t\t\tif (longitude != null && latitude != null) {\n\t\t\t\t\t\t\tcoordinates.push([longitude, latitude]);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst geometry = point.get(\"geometry\");\n\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\tconst coords = geometry.coordinates;\n\t\t\t\t\t\t\t\tif (coords) {\n\t\t\t\t\t\t\t\t\tcoordinates.push([coords[0] as any, coords[1] as any]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\n\t\t\t\t\tlet geometry: any = { type: \"LineString\", coordinates: coordinates };\n\n\t\t\t\t\tdataItem.setRaw(\"geometry\", geometry);\n\t\t\t\t\tmapLine.set(\"geometry\", geometry);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmapLine.set(\"geometry\", dataItem.get(\"geometry\"));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst mapLine = dataItem.get(\"mapLine\");\n\t\tif (mapLine) {\n\t\t\tthis.mapLines.removeValue(mapLine);\n\t\t\tmapLine.dispose();\n\t\t}\n\t}\n}\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","import {range} from \"d3-array\";\nimport {abs, ceil, epsilon} from \"./math.js\";\n\nfunction graticuleX(y0, y1, dy) {\n  var y = range(y0, y1 - epsilon, dy).concat(y1);\n  return function(x) { return y.map(function(y) { return [x, y]; }); };\n}\n\nfunction graticuleY(x0, x1, dx) {\n  var x = range(x0, x1 - epsilon, dx).concat(x1);\n  return function(y) { return x.map(function(x) { return [x, y]; }); };\n}\n\nexport default function graticule() {\n  var x1, x0, X1, X0,\n      y1, y0, Y1, Y0,\n      dx = 10, dy = dx, DX = 90, DY = 360,\n      x, y, X, Y,\n      precision = 2.5;\n\n  function graticule() {\n    return {type: \"MultiLineString\", coordinates: lines()};\n  }\n\n  function lines() {\n    return range(ceil(X0 / DX) * DX, X1, DX).map(X)\n        .concat(range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))\n        .concat(range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))\n        .concat(range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));\n  }\n\n  graticule.lines = function() {\n    return lines().map(function(coordinates) { return {type: \"LineString\", coordinates: coordinates}; });\n  };\n\n  graticule.outline = function() {\n    return {\n      type: \"Polygon\",\n      coordinates: [\n        X(X0).concat(\n        Y(Y1).slice(1),\n        X(X1).reverse().slice(1),\n        Y(Y0).reverse().slice(1))\n      ]\n    };\n  };\n\n  graticule.extent = function(_) {\n    if (!arguments.length) return graticule.extentMinor();\n    return graticule.extentMajor(_).extentMinor(_);\n  };\n\n  graticule.extentMajor = function(_) {\n    if (!arguments.length) return [[X0, Y0], [X1, Y1]];\n    X0 = +_[0][0], X1 = +_[1][0];\n    Y0 = +_[0][1], Y1 = +_[1][1];\n    if (X0 > X1) _ = X0, X0 = X1, X1 = _;\n    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.extentMinor = function(_) {\n    if (!arguments.length) return [[x0, y0], [x1, y1]];\n    x0 = +_[0][0], x1 = +_[1][0];\n    y0 = +_[0][1], y1 = +_[1][1];\n    if (x0 > x1) _ = x0, x0 = x1, x1 = _;\n    if (y0 > y1) _ = y0, y0 = y1, y1 = _;\n    return graticule.precision(precision);\n  };\n\n  graticule.step = function(_) {\n    if (!arguments.length) return graticule.stepMinor();\n    return graticule.stepMajor(_).stepMinor(_);\n  };\n\n  graticule.stepMajor = function(_) {\n    if (!arguments.length) return [DX, DY];\n    DX = +_[0], DY = +_[1];\n    return graticule;\n  };\n\n  graticule.stepMinor = function(_) {\n    if (!arguments.length) return [dx, dy];\n    dx = +_[0], dy = +_[1];\n    return graticule;\n  };\n\n  graticule.precision = function(_) {\n    if (!arguments.length) return precision;\n    precision = +_;\n    x = graticuleX(y0, y1, 90);\n    y = graticuleY(x0, x1, precision);\n    X = graticuleX(Y0, Y1, 90);\n    Y = graticuleY(X0, X1, precision);\n    return graticule;\n  };\n\n  return graticule\n      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])\n      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);\n}\n\nexport function graticule10() {\n  return graticule()();\n}\n","import { MapLineSeries, IMapLineSeriesSettings, IMapLineSeriesPrivate, IMapLineSeriesDataItem } from \"./MapLineSeries\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport { geoGraticule } from \"d3-geo\";\n\n\nexport interface IGraticuleSeriesDataItem extends IMapLineSeriesDataItem {\n}\n\nexport interface IGraticuleSeriesPrivate extends IMapLineSeriesPrivate {\n}\n\nexport interface IGraticuleSeriesSettings extends IMapLineSeriesSettings {\n\n\t/**\n\t * Place a grid line every Xth latitude/longitude.\n\t *\n\t * @default 10\n\t */\n\tstep?: number;\n}\n\n/**\n * A [[MapChart]] series to draw a map grid.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/graticule-series/} for more info\n * @important\n */\nexport class GraticuleSeries extends MapLineSeries {\n\n\tpublic static className: string = \"GraticuleSeries\";\n\tpublic static classNames: Array<string> = MapLineSeries.classNames.concat([GraticuleSeries.className]);\n\n\tdeclare public _settings: IGraticuleSeriesSettings;\n\tdeclare public _privateSettings: IGraticuleSeriesPrivate;\n\n\tprotected _dataItem: DataItem<this[\"_dataItemSettings\"]> = this.makeDataItem({});\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.dataItems.push(this._dataItem);\n\t\tthis._generate();\n\t}\n\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\n\t\tif (this.isDirty(\"step\")) {\n\t\t\tthis._generate();\n\t\t}\n\t}\n\n\tprotected _generate() {\n\t\tlet graticule = geoGraticule();\n\n\t\tif (graticule) {\n\t\t\tconst step = this.get(\"step\", 10);\n\n\t\t\tgraticule.stepMinor([360, 360]);\n\t\t\tgraticule.stepMajor([step, step]);\n\t\t\tthis._dataItem.setRaw(\"geometry\", graticule());\n\t\t}\n\t}\n}\n","import {Adder} from \"d3-array\";\nimport {abs} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar areaSum = new Adder(),\n    areaRingSum = new Adder(),\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    areaStream.lineStart = areaStream.lineEnd = areaStream.point = noop;\n    areaSum.add(abs(areaRingSum));\n    areaRingSum = new Adder();\n  },\n  result: function() {\n    var area = areaSum / 2;\n    areaSum = new Adder();\n    return area;\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaPointFirst(x, y) {\n  areaStream.point = areaPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction areaPoint(x, y) {\n  areaRingSum.add(y0 * x - x0 * y);\n  x0 = x, y0 = y;\n}\n\nfunction areaRingEnd() {\n  areaPoint(x00, y00);\n}\n\nexport default areaStream;\n","import {sqrt} from \"../math.js\";\n\n// TODO Enforce positive area for exterior, negative area for interior?\n\nvar X0 = 0,\n    Y0 = 0,\n    Z0 = 0,\n    X1 = 0,\n    Y1 = 0,\n    Z1 = 0,\n    X2 = 0,\n    Y2 = 0,\n    Z2 = 0,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar centroidStream = {\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.point = centroidPoint;\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  },\n  result: function() {\n    var centroid = Z2 ? [X2 / Z2, Y2 / Z2]\n        : Z1 ? [X1 / Z1, Y1 / Z1]\n        : Z0 ? [X0 / Z0, Y0 / Z0]\n        : [NaN, NaN];\n    X0 = Y0 = Z0 =\n    X1 = Y1 = Z1 =\n    X2 = Y2 = Z2 = 0;\n    return centroid;\n  }\n};\n\nfunction centroidPoint(x, y) {\n  X0 += x;\n  Y0 += y;\n  ++Z0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidPointFirstLine;\n}\n\nfunction centroidPointFirstLine(x, y) {\n  centroidStream.point = centroidPointLine;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidPointLine(x, y) {\n  var dx = x - x0, dy = y - y0, z = sqrt(dx * dx + dy * dy);\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingStart() {\n  centroidStream.point = centroidPointFirstRing;\n}\n\nfunction centroidRingEnd() {\n  centroidPointRing(x00, y00);\n}\n\nfunction centroidPointFirstRing(x, y) {\n  centroidStream.point = centroidPointRing;\n  centroidPoint(x00 = x0 = x, y00 = y0 = y);\n}\n\nfunction centroidPointRing(x, y) {\n  var dx = x - x0,\n      dy = y - y0,\n      z = sqrt(dx * dx + dy * dy);\n\n  X1 += z * (x0 + x) / 2;\n  Y1 += z * (y0 + y) / 2;\n  Z1 += z;\n\n  z = y0 * x - x0 * y;\n  X2 += z * (x0 + x);\n  Y2 += z * (y0 + y);\n  Z2 += z * 3;\n  centroidPoint(x0 = x, y0 = y);\n}\n\nexport default centroidStream;\n","import {tau} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nexport default function PathContext(context) {\n  this._context = context;\n}\n\nPathContext.prototype = {\n  _radius: 4.5,\n  pointRadius: function(_) {\n    return this._radius = _, this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._context.closePath();\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._context.moveTo(x, y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._context.lineTo(x, y);\n        break;\n      }\n      default: {\n        this._context.moveTo(x + this._radius, y);\n        this._context.arc(x, y, this._radius, 0, tau);\n        break;\n      }\n    }\n  },\n  result: noop\n};\n","import {Adder} from \"d3-array\";\nimport {sqrt} from \"../math.js\";\nimport noop from \"../noop.js\";\n\nvar lengthSum = new Adder(),\n    lengthRing,\n    x00,\n    y00,\n    x0,\n    y0;\n\nvar lengthStream = {\n  point: noop,\n  lineStart: function() {\n    lengthStream.point = lengthPointFirst;\n  },\n  lineEnd: function() {\n    if (lengthRing) lengthPoint(x00, y00);\n    lengthStream.point = noop;\n  },\n  polygonStart: function() {\n    lengthRing = true;\n  },\n  polygonEnd: function() {\n    lengthRing = null;\n  },\n  result: function() {\n    var length = +lengthSum;\n    lengthSum = new Adder();\n    return length;\n  }\n};\n\nfunction lengthPointFirst(x, y) {\n  lengthStream.point = lengthPoint;\n  x00 = x0 = x, y00 = y0 = y;\n}\n\nfunction lengthPoint(x, y) {\n  x0 -= x, y0 -= y;\n  lengthSum.add(sqrt(x0 * x0 + y0 * y0));\n  x0 = x, y0 = y;\n}\n\nexport default lengthStream;\n","export default function PathString() {\n  this._string = [];\n}\n\nPathString.prototype = {\n  _radius: 4.5,\n  _circle: circle(4.5),\n  pointRadius: function(_) {\n    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;\n    return this;\n  },\n  polygonStart: function() {\n    this._line = 0;\n  },\n  polygonEnd: function() {\n    this._line = NaN;\n  },\n  lineStart: function() {\n    this._point = 0;\n  },\n  lineEnd: function() {\n    if (this._line === 0) this._string.push(\"Z\");\n    this._point = NaN;\n  },\n  point: function(x, y) {\n    switch (this._point) {\n      case 0: {\n        this._string.push(\"M\", x, \",\", y);\n        this._point = 1;\n        break;\n      }\n      case 1: {\n        this._string.push(\"L\", x, \",\", y);\n        break;\n      }\n      default: {\n        if (this._circle == null) this._circle = circle(this._radius);\n        this._string.push(\"M\", x, \",\", y, this._circle);\n        break;\n      }\n    }\n  },\n  result: function() {\n    if (this._string.length) {\n      var result = this._string.join(\"\");\n      this._string = [];\n      return result;\n    } else {\n      return null;\n    }\n  }\n};\n\nfunction circle(radius) {\n  return \"m0,\" + radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + -2 * radius\n      + \"a\" + radius + \",\" + radius + \" 0 1,1 0,\" + 2 * radius\n      + \"z\";\n}\n","import {Adder} from \"d3-array\";\nimport {asin, atan2, cos, degrees, epsilon, epsilon2, hypot, radians, sin, sqrt} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nvar W0, W1,\n    X0, Y0, Z0,\n    X1, Y1, Z1,\n    X2, Y2, Z2,\n    lambda00, phi00, // first point\n    x0, y0, z0; // previous point\n\nvar centroidStream = {\n  sphere: noop,\n  point: centroidPoint,\n  lineStart: centroidLineStart,\n  lineEnd: centroidLineEnd,\n  polygonStart: function() {\n    centroidStream.lineStart = centroidRingStart;\n    centroidStream.lineEnd = centroidRingEnd;\n  },\n  polygonEnd: function() {\n    centroidStream.lineStart = centroidLineStart;\n    centroidStream.lineEnd = centroidLineEnd;\n  }\n};\n\n// Arithmetic mean of Cartesian vectors.\nfunction centroidPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));\n}\n\nfunction centroidPointCartesian(x, y, z) {\n  ++W0;\n  X0 += (x - X0) / W0;\n  Y0 += (y - Y0) / W0;\n  Z0 += (z - Z0) / W0;\n}\n\nfunction centroidLineStart() {\n  centroidStream.point = centroidLinePointFirst;\n}\n\nfunction centroidLinePointFirst(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidStream.point = centroidLinePoint;\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLinePoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidLineEnd() {\n  centroidStream.point = centroidPoint;\n}\n\n// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,\n// J. Applied Mechanics 42, 239 (1975).\nfunction centroidRingStart() {\n  centroidStream.point = centroidRingPointFirst;\n}\n\nfunction centroidRingEnd() {\n  centroidRingPoint(lambda00, phi00);\n  centroidStream.point = centroidPoint;\n}\n\nfunction centroidRingPointFirst(lambda, phi) {\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  centroidStream.point = centroidRingPoint;\n  var cosPhi = cos(phi);\n  x0 = cosPhi * cos(lambda);\n  y0 = cosPhi * sin(lambda);\n  z0 = sin(phi);\n  centroidPointCartesian(x0, y0, z0);\n}\n\nfunction centroidRingPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  var cosPhi = cos(phi),\n      x = cosPhi * cos(lambda),\n      y = cosPhi * sin(lambda),\n      z = sin(phi),\n      cx = y0 * z - z0 * y,\n      cy = z0 * x - x0 * z,\n      cz = x0 * y - y0 * x,\n      m = hypot(cx, cy, cz),\n      w = asin(m), // line weight = angle\n      v = m && -w / m; // area weight multiplier\n  X2.add(v * cx);\n  Y2.add(v * cy);\n  Z2.add(v * cz);\n  W1 += w;\n  X1 += w * (x0 + (x0 = x));\n  Y1 += w * (y0 + (y0 = y));\n  Z1 += w * (z0 + (z0 = z));\n  centroidPointCartesian(x0, y0, z0);\n}\n\nexport default function(object) {\n  W0 = W1 =\n  X0 = Y0 = Z0 =\n  X1 = Y1 = Z1 = 0;\n  X2 = new Adder();\n  Y2 = new Adder();\n  Z2 = new Adder();\n  stream(object, centroidStream);\n\n  var x = +X2,\n      y = +Y2,\n      z = +Z2,\n      m = hypot(x, y, z);\n\n  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.\n  if (m < epsilon2) {\n    x = X1, y = Y1, z = Z1;\n    // If the feature has zero length, fall back to arithmetic mean of point vectors.\n    if (W1 < epsilon) x = X0, y = Y0, z = Z0;\n    m = hypot(x, y, z);\n    // If the feature still has an undefined ccentroid, then return.\n    if (m < epsilon2) return [NaN, NaN];\n  }\n\n  return [atan2(y, x) * degrees, asin(z / m) * degrees];\n}\n","import {Adder} from \"d3-array\";\nimport {atan2, cos, quarterPi, radians, sin, tau} from \"./math.js\";\nimport noop from \"./noop.js\";\nimport stream from \"./stream.js\";\n\nexport var areaRingSum = new Adder();\n\n// hello?\n\nvar areaSum = new Adder(),\n    lambda00,\n    phi00,\n    lambda0,\n    cosPhi0,\n    sinPhi0;\n\nexport var areaStream = {\n  point: noop,\n  lineStart: noop,\n  lineEnd: noop,\n  polygonStart: function() {\n    areaRingSum = new Adder();\n    areaStream.lineStart = areaRingStart;\n    areaStream.lineEnd = areaRingEnd;\n  },\n  polygonEnd: function() {\n    var areaRing = +areaRingSum;\n    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);\n    this.lineStart = this.lineEnd = this.point = noop;\n  },\n  sphere: function() {\n    areaSum.add(tau);\n  }\n};\n\nfunction areaRingStart() {\n  areaStream.point = areaPointFirst;\n}\n\nfunction areaRingEnd() {\n  areaPoint(lambda00, phi00);\n}\n\nfunction areaPointFirst(lambda, phi) {\n  areaStream.point = areaPoint;\n  lambda00 = lambda, phi00 = phi;\n  lambda *= radians, phi *= radians;\n  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);\n}\n\nfunction areaPoint(lambda, phi) {\n  lambda *= radians, phi *= radians;\n  phi = phi / 2 + quarterPi; // half the angular distance from south pole\n\n  // Spherical excess E for a spherical triangle with vertices: south pole,\n  // previous point, current point.  Uses a formula derived from Cagnoli’s\n  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).\n  var dLambda = lambda - lambda0,\n      sdLambda = dLambda >= 0 ? 1 : -1,\n      adLambda = sdLambda * dLambda,\n      cosPhi = cos(phi),\n      sinPhi = sin(phi),\n      k = sinPhi0 * sinPhi,\n      u = cosPhi0 * cosPhi + k * cos(adLambda),\n      v = k * sdLambda * sin(adLambda);\n  areaRingSum.add(atan2(v, u));\n\n  // Advance the previous points.\n  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;\n}\n\nexport default function(object) {\n  areaSum = new Adder();\n  stream(object, areaStream);\n  return areaSum * 2;\n}\n","import {Adder} from \"d3-array\";\nimport {areaStream, areaRingSum} from \"./area.js\";\nimport {cartesian, cartesianCross, cartesianNormalizeInPlace, spherical} from \"./cartesian.js\";\nimport {abs, degrees, epsilon, radians} from \"./math.js\";\nimport stream from \"./stream.js\";\n\nvar lambda0, phi0, lambda1, phi1, // bounds\n    lambda2, // previous lambda-coordinate\n    lambda00, phi00, // first point\n    p0, // previous 3D point\n    deltaSum,\n    ranges,\n    range;\n\nvar boundsStream = {\n  point: boundsPoint,\n  lineStart: boundsLineStart,\n  lineEnd: boundsLineEnd,\n  polygonStart: function() {\n    boundsStream.point = boundsRingPoint;\n    boundsStream.lineStart = boundsRingStart;\n    boundsStream.lineEnd = boundsRingEnd;\n    deltaSum = new Adder();\n    areaStream.polygonStart();\n  },\n  polygonEnd: function() {\n    areaStream.polygonEnd();\n    boundsStream.point = boundsPoint;\n    boundsStream.lineStart = boundsLineStart;\n    boundsStream.lineEnd = boundsLineEnd;\n    if (areaRingSum < 0) lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n    else if (deltaSum > epsilon) phi1 = 90;\n    else if (deltaSum < -epsilon) phi0 = -90;\n    range[0] = lambda0, range[1] = lambda1;\n  },\n  sphere: function() {\n    lambda0 = -(lambda1 = 180), phi0 = -(phi1 = 90);\n  }\n};\n\nfunction boundsPoint(lambda, phi) {\n  ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n}\n\nfunction linePoint(lambda, phi) {\n  var p = cartesian([lambda * radians, phi * radians]);\n  if (p0) {\n    var normal = cartesianCross(p0, p),\n        equatorial = [normal[1], -normal[0], 0],\n        inflection = cartesianCross(equatorial, normal);\n    cartesianNormalizeInPlace(inflection);\n    inflection = spherical(inflection);\n    var delta = lambda - lambda2,\n        sign = delta > 0 ? 1 : -1,\n        lambdai = inflection[0] * degrees * sign,\n        phii,\n        antimeridian = abs(delta) > 180;\n    if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = inflection[1] * degrees;\n      if (phii > phi1) phi1 = phii;\n    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {\n      phii = -inflection[1] * degrees;\n      if (phii < phi0) phi0 = phii;\n    } else {\n      if (phi < phi0) phi0 = phi;\n      if (phi > phi1) phi1 = phi;\n    }\n    if (antimeridian) {\n      if (lambda < lambda2) {\n        if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n      } else {\n        if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n      }\n    } else {\n      if (lambda1 >= lambda0) {\n        if (lambda < lambda0) lambda0 = lambda;\n        if (lambda > lambda1) lambda1 = lambda;\n      } else {\n        if (lambda > lambda2) {\n          if (angle(lambda0, lambda) > angle(lambda0, lambda1)) lambda1 = lambda;\n        } else {\n          if (angle(lambda, lambda1) > angle(lambda0, lambda1)) lambda0 = lambda;\n        }\n      }\n    }\n  } else {\n    ranges.push(range = [lambda0 = lambda, lambda1 = lambda]);\n  }\n  if (phi < phi0) phi0 = phi;\n  if (phi > phi1) phi1 = phi;\n  p0 = p, lambda2 = lambda;\n}\n\nfunction boundsLineStart() {\n  boundsStream.point = linePoint;\n}\n\nfunction boundsLineEnd() {\n  range[0] = lambda0, range[1] = lambda1;\n  boundsStream.point = boundsPoint;\n  p0 = null;\n}\n\nfunction boundsRingPoint(lambda, phi) {\n  if (p0) {\n    var delta = lambda - lambda2;\n    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);\n  } else {\n    lambda00 = lambda, phi00 = phi;\n  }\n  areaStream.point(lambda, phi);\n  linePoint(lambda, phi);\n}\n\nfunction boundsRingStart() {\n  areaStream.lineStart();\n}\n\nfunction boundsRingEnd() {\n  boundsRingPoint(lambda00, phi00);\n  areaStream.lineEnd();\n  if (abs(deltaSum) > epsilon) lambda0 = -(lambda1 = 180);\n  range[0] = lambda0, range[1] = lambda1;\n  p0 = null;\n}\n\n// Finds the left-right distance between two longitudes.\n// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want\n// the distance between ±180° to be 360°.\nfunction angle(lambda0, lambda1) {\n  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;\n}\n\nfunction rangeCompare(a, b) {\n  return a[0] - b[0];\n}\n\nfunction rangeContains(range, x) {\n  return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;\n}\n\nexport default function(feature) {\n  var i, n, a, b, merged, deltaMax, delta;\n\n  phi1 = lambda1 = -(lambda0 = phi0 = Infinity);\n  ranges = [];\n  stream(feature, boundsStream);\n\n  // First, sort ranges by their minimum longitudes.\n  if (n = ranges.length) {\n    ranges.sort(rangeCompare);\n\n    // Then, merge any ranges that overlap.\n    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {\n      b = ranges[i];\n      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {\n        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];\n        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];\n      } else {\n        merged.push(a = b);\n      }\n    }\n\n    // Finally, find the largest gap between the merged ranges.\n    // The final bounding box will be the inverse of this gap.\n    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {\n      b = merged[i];\n      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0 = b[0], lambda1 = a[1];\n    }\n  }\n\n  ranges = range = null;\n\n  return lambda0 === Infinity || phi0 === Infinity\n      ? [[NaN, NaN], [NaN, NaN]]\n      : [[lambda0, phi0], [lambda1, phi1]];\n}\n","import type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport * as $math from \"../../core/util/Math\";\nimport { geoCircle, geoCentroid, geoBounds } from \"d3-geo\";\n\n/**\n * Returns a GeoJSON representation of a circle, suitable for use as `geometry` value\n * in a [[MapPolygon]] in a [[MapPolygonSeries]].\n * \n * @param   geoPoint  Coordinates\n * @param   radius    Circle radius in degrees\n * @return            Polygon geometry\n */\nexport function getGeoCircle(geoPoint: IGeoPoint, radius: number): GeoJSON.Polygon {\n\treturn geoCircle().center([geoPoint.longitude, geoPoint.latitude]).radius(radius)();\n}\n\n/**\n * @ignore\n */\nexport function getGeoCentroid(geometry: GeoJSON.GeometryObject): IGeoPoint {\n\tconst centroid = geoCentroid(geometry);\n\treturn { longitude: centroid[0], latitude: centroid[1] };\n}\n\n/**\n * @ignore\n */\nexport function getGeoBounds(geometry: GeoJSON.GeometryObject): { left: number, right: number, top: number, bottom: number } {\n\tconst bounds = geoBounds(geometry);\n\n\tif (bounds) {\n\t\tconst geoBounds = { left: bounds[0][0], right: bounds[1][0], top: bounds[1][1], bottom: bounds[0][1] };\n\t\tif(geoBounds.right < geoBounds.left){\n\t\t\tgeoBounds.right = 180;\n\t\t\tgeoBounds.left = -180;\n\t\t}\n\t\treturn geoBounds;\n\t}\n\treturn { left: 0, right: 0, top: 0, bottom: 0 };\n}\n\n/**\n * Returns a GeoJSON representation of a rectangle, suitable for use\n * as `geometry` value in a [[MapPolygon]] in a [[MapPolygonSeries]].\n * \n * @param   north  North latitude\n * @param   east   East longitude\n * @param   south  South latitude\n * @param   west   West longitude\n * @return         polygon geometry\n */\nexport function getGeoRectangle(north: number, east: number, south: number, west: number): GeoJSON.MultiPolygon {\n\n\tlet multiPolygon: Array<Array<Array<[number, number]>>> = [];\n\n\tif (west <= -180) {\n\t\twest = -179.9999;\n\t}\n\tif (south >= -90) {\n\t\tsouth = -89.9999;\n\t}\n\tif (north <= 90) {\n\t\tnorth = 89.9999;\n\t}\n\tif (east >= 180) {\n\t\teast = 179.9999;\n\t}\n\n\n\tlet stepLong = Math.min(90, (east - west) / Math.ceil((east - west) / 90));\n\tlet stepLat = (north - south) / Math.ceil((north - south) / 90);\n\n\tfor (let ln = west; ln < east; ln = ln + stepLong) {\n\t\tlet surface: Array<[number, number]> = [];\n\t\tmultiPolygon.push([surface]);\n\n\t\tif (ln + stepLong > east) {\n\t\t\tstepLong = east - ln;\n\t\t}\n\n\t\tfor (let ll = ln; ll <= ln + stepLong; ll = ll + 5) {\n\t\t\tsurface.push([ll, north]);\n\t\t}\n\n\t\tfor (let lt = north; lt >= south; lt = lt - stepLat) {\n\t\t\tsurface.push([ln + stepLong, lt]);\n\t\t}\n\n\t\tfor (let ll = ln + stepLong; ll >= ln; ll = ll - 5) {\n\t\t\tsurface.push([ll, south]);\n\t\t}\n\n\t\tfor (let lt = south; lt <= north; lt = lt + stepLat) {\n\t\t\tsurface.push([ln, lt]);\n\t\t}\n\t}\n\n\treturn { type: \"MultiPolygon\", coordinates: multiPolygon };\n}\n\n/**\n * Update longitudes and latitudes that wrap around -180/180 and -90/90 values.\n * \n * @param   geoPoint  Input coordinates\n * @return            Updated coordinates\n */\nexport function normalizeGeoPoint(geoPoint: IGeoPoint): IGeoPoint {\n\tlet longitude = wrapAngleTo180(geoPoint.longitude);\n\tlet latitude = Math.asin(Math.sin((geoPoint.latitude * $math.RADIANS))) * $math.DEGREES;\n\n\tlet latitude180 = wrapAngleTo180(geoPoint.latitude);\n\n\tif (Math.abs(latitude180) > 90) {\n\t\tlongitude = wrapAngleTo180(longitude + 180);\n\t}\n\n\tgeoPoint.longitude = longitude;\n\tgeoPoint.latitude = latitude;\n\n\treturn geoPoint;\n}\n\n/**\n * @ignore\n */\nexport function wrapAngleTo180(angle: number): number {\n\tangle = angle % 360;\n\n\tif (angle > 180) {\n\t\tangle -= 360;\n\t}\n\tif (angle < -180) {\n\t\tangle += 360;\n\t}\n\n\treturn angle;\n}","import type { MapSeries } from \"./MapSeries\";\nimport type { GeoProjection, GeoPath } from \"d3-geo\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { Time } from \"../../core/util/Animation\";\nimport type { ZoomControl } from \"./ZoomControl\";\nimport type { Animation } from \"../../core/util/Entity\";\n\nimport { SerialChart, ISerialChartPrivate, ISerialChartSettings, ISerialChartEvents } from \"../../core/render/SerialChart\";\nimport { Rectangle } from \"../../core/render/Rectangle\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { geoPath } from \"d3-geo\";\nimport { Color } from \"../../core/util/Color\";\nimport { registry } from \"../../core/Registry\";\n\nimport * as $math from \"../../core/util/Math\";\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $mapUtils from \"./MapUtils\";\nimport * as $object from \"../../core/util/Object\";\nimport * as $utils from \"../../core/util/Utils\";\n\nimport type { IDisposer } from \"../../core/util/Disposer\";\nimport type { ISpritePointerEvent } from \"../../core/render/Sprite\";\n\nexport interface IMapChartSettings extends ISerialChartSettings {\n\n\t/**\n\t * A projection to use when plotting the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Projections} for more info\n\t */\n\tprojection?: GeoProjection;\n\n\t/**\n\t * Current zoom level.\n\t */\n\tzoomLevel?: number;\n\n\t/**\n\t * @ignore\n\t */\n\ttranslateX?: number;\n\n\t/**\n\t * @ignore\n\t */\n\ttranslateY?: number;\n\n\t/**\n\t * Vertical centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationY?: number;\n\n\t/**\n\t * Horizontal centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationX?: number;\n\n\t/**\n\t * Depth centering of the map.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Centering_the_map} for more info\n\t */\n\trotationZ?: number;\n\n\t/**\n\t * Highest zoom level map is allowed to zoom in to.\n\t *\n\t * @deault 32\n\t */\n\tmaxZoomLevel?: number;\n\n\t/**\n\t * Lowest zoom level map is allowed to zoom in to.\n\t *\n\t * @deault 1\n\t */\n\tminZoomLevel?: number;\n\n\t/**\n\t * Increment zoom level by `zoomStep` when user zooms in via [[ZoomControl]] or\n\t * API.\n\t *\n\t * @default 2\n\t */\n\tzoomStep?: number;\n\n\t/**\n\t * Defines what happens when map is being dragged horizontally.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning} for more info\n\t * @default \"translateX\"\n\t */\n\tpanX?: \"none\" | \"rotateX\" | \"translateX\";\n\n\t/**\n\t * Defines what happens when map is being dragged vertically.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning} for more info\n\t * @default \"translateY\"\n\t */\n\tpanY?: \"none\" | \"rotateY\" | \"translateY\";\n\n\t/**\n\t * Enables pinch-zooming of the map on multi-touch devices.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Pinch_zoom} for more info\n\t * @default true\n\t */\n\tpinchZoom?: boolean;\n\n\t/**\n\t * Defines what happens when mouse wheel is turned horizontally.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Mouse_wheel_behavior} for more info\n\t * @default \"none\"\n\t */\n\twheelX?: \"none\" | \"zoom\" | \"rotateX\" | \"rotateY\";\n\n\t/**\n\t * Defines what happens when mouse wheel is turned vertically.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Mouse_wheel_behavior} for more info\n\t * @default \"zoom\"\n\t */\n\twheelY?: \"none\" | \"zoom\" | \"rotateX\" | \"rotateY\";\n\n\t/**\n\t * Sensitivity of a mouse wheel.\n\t *\n\t * @default 1\n\t */\n\twheelSensitivity?: number;\n\n\t/**\n\t * Duration of mouse-wheel action animation, in milliseconds.\n\t */\n\twheelDuration?: number;\n\n\t/**\n\t * An easing function to use for mouse wheel action animations.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t * @default am5.ease.out($ease.cubic)\n\t */\n\twheelEasing?: (t: Time) => Time;\n\n\t/**\n\t * Duration of zoom/pan animations, in milliseconds.\n\t */\n\tanimationDuration?: number;\n\n\t/**\n\t * An easing function to use for zoom/pan animations.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/concepts/animations/#Easing_functions} for more info\n\t * @default am5.ease.out($ease.cubic)\n\t */\n\tanimationEasing?: (t: Time) => Time;\n\n\n\t/**\n\t * A [[ZoomControl]] instance.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/#Zoom_control} for more info\n\t */\n\tzoomControl?: ZoomControl;\n\n\t/**\n\t * Initial/home zoom level.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeZoomLevel?: number;\n\n\t/**\n\t * Initial coordinates to center map on load or `goHome()` call.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Initial_position_and_zoom} for more info\n\t */\n\thomeGeoPoint?: IGeoPoint;\n\n\t/**\n\t * How much of a map can go outside the viewport.\n\t *\n\t * @default 0.4\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Panning_outside_viewport} for more info\n\t */\n\t maxPanOut?: number;\n\n}\n\nexport interface IMapChartPrivate extends ISerialChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tgeoPath: GeoPath;\n\n\t/**\n\t * @ignore\n\t */\n\tmapScale: number;\n\n}\n\n\nexport interface IMapChartEvents extends ISerialChartEvents {\n\n\t/**\n\t * Invoked when geo bounds of the map change, usually after map is iniitalized\n\t */\n\tgeoboundschanged: {};\n\n}\n\n\nexport class MapChart extends SerialChart {\n\tpublic static className: string = \"MapChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([MapChart.className]);\n\n\tdeclare public _settings: IMapChartSettings;\n\tdeclare public _privateSettings: IMapChartPrivate;\n\tdeclare public _seriesType: MapSeries;\n\tdeclare public _events: IMapChartEvents;\n\n\tprotected _downTranslateX: number | undefined;\n\tprotected _downTranslateY: number | undefined;\n\tprotected _downRotationX: number | undefined;\n\tprotected _downRotationY: number | undefined;\n\tprotected _downRotationZ: number | undefined;\n\tprotected _pLat: number = 0;\n\tprotected _pLon: number = 0;\n\n\tprotected _movePoints: { [index: number]: IPoint } = {};\n\tprotected _downZoomLevel: number = 1;\n\tprotected _doubleDownDistance: number = 0;\n\n\tprotected _dirtyGeometries: boolean = false;\n\tprotected _geometryColection: GeoJSON.GeometryCollection = { type: \"GeometryCollection\", geometries: [] };\n\n\tprotected _centerLocation: [number, number] | null = null;\n\n\tprotected _za?: Animation<this[\"_settings\"][\"zoomLevel\"]>;\n\tprotected _rxa?: Animation<this[\"_settings\"][\"rotationX\"]>;\n\tprotected _rya?: Animation<this[\"_settings\"][\"rotationY\"]>;\n\tprotected _txa?: Animation<this[\"_settings\"][\"translateX\"]>;\n\tprotected _tya?: Animation<this[\"_settings\"][\"translateY\"]>;\n\n\tprotected _mapBounds = [[0, 0], [0, 0]];\n\n\tprotected _geoCentroid: IGeoPoint = { longitude: 0, latitude: 0 };\n\tprotected _geoBounds: { left: number, right: number, top: number, bottom: number } = { left: 0, right: 0, top: 0, bottom: 0 };\n\tprotected _prevGeoBounds: { left: number, right: number, top: number, bottom: number } = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\tprotected _dispatchBounds: boolean = false;\n\n\tprotected _wheelDp: IDisposer | undefined;\n\n\tprotected _makeGeoPath() {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tconst path = geoPath();\n\t\tpath.projection(projection);\n\t\tthis.setPrivateRaw(\"geoPath\", path);\n\t}\n\n\t/**\n\t * Returns coordinates to geographical center of the map.\n\t */\n\tpublic geoCentroid() {\n\t\treturn this._geoCentroid;\n\t}\n\n\t/**\n\t * Returns geographical bounds of the map.\n\t */\n\tpublic geoBounds() {\n\t\treturn this._geoBounds;\n\t}\n\n\tprotected _handleSetWheel() {\n\n\t\tconst wheelX = this.get(\"wheelX\");\n\t\tconst wheelY = this.get(\"wheelY\");\n\t\tconst chartContainer = this.chartContainer;\n\n\t\tif (wheelX != \"none\" || wheelY != \"none\") {\n\n\t\t\tchartContainer.set(\"wheelable\", true);\n\t\t\tthis._wheelDp = chartContainer.events.on(\"wheel\", (event) => {\n\t\t\t\tconst wheelEasing = this.get(\"wheelEasing\")!;\n\t\t\t\tconst wheelSensitivity = this.get(\"wheelSensitivity\", 1);\n\t\t\t\tconst wheelDuration = this.get(\"wheelDuration\", 0);\n\n\t\t\t\tconst wheelEvent = event.originalEvent;\n\n\n\t\t\t\tconst chartContainer = this.chartContainer;\n\t\t\t\tconst point = chartContainer._display.toLocal(event.point);\n\n\t\t\t\tif ((wheelY == \"zoom\")) {\n\t\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaY, point);\n\t\t\t\t}\n\t\t\t\telse if (wheelY == \"rotateY\") {\n\t\t\t\t\tthis._handleWheelRotateY(wheelEvent.deltaY / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\t\t\t\telse if (wheelY == \"rotateX\") {\n\t\t\t\t\tthis._handleWheelRotateX(wheelEvent.deltaY / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\n\t\t\t\tif ((wheelX == \"zoom\")) {\n\t\t\t\t\tthis._handleWheelZoom(wheelEvent.deltaX, point);\n\t\t\t\t}\n\t\t\t\telse if (wheelX == \"rotateY\") {\n\t\t\t\t\tthis._handleWheelRotateY(wheelEvent.deltaX / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\t\t\t\telse if (wheelX == \"rotateX\") {\n\t\t\t\t\tthis._handleWheelRotateX(wheelEvent.deltaX / 5 * wheelSensitivity, wheelDuration, wheelEasing);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tthis._disposers.push(this._wheelDp);\n\t\t}\n\t\telse {\n\t\t\tchartContainer.set(\"wheelable\", false);\n\n\t\t\tif (this._wheelDp) {\n\t\t\t\tthis._wheelDp.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst projection = this.get(\"projection\")!;\n\t\tconst w = this.innerWidth();\n\t\tconst h = this.innerHeight();\n\n\t\tif (this.isDirty(\"projection\")) {\n\t\t\tthis._makeGeoPath();\n\t\t\tthis.markDirtyProjection();\n\t\t\tthis._fitMap();\n\n\t\t\tprojection.scale(this.getPrivate(\"mapScale\") * this.get(\"zoomLevel\", 1));\n\t\t\tif (projection.rotate) {\n\t\t\t\tprojection.rotate([this.get(\"rotationX\", 0), this.get(\"rotationY\", 0), this.get(\"rotationZ\", 0)])\n\t\t\t}\n\n\t\t\tlet prev = this._prevSettings.projection;\n\t\t\tif (prev && prev != projection) {\n\t\t\t\tlet hw = w / 2;\n\t\t\t\tlet hh = h / 2;\n\t\t\t\tif (prev.invert) {\n\t\t\t\t\tlet centerLocation = prev.invert([hw, hh]);\n\n\t\t\t\t\tif (centerLocation) {\n\n\t\t\t\t\t\tlet xy = projection(centerLocation);\n\t\t\t\t\t\tif (xy) {\n\t\t\t\t\t\t\tlet translate = projection.translate();\n\n\t\t\t\t\t\t\tlet xx = hw - ((xy[0] - translate[0]));\n\t\t\t\t\t\t\tlet yy = hh - ((xy[1] - translate[1]));\n\n\t\t\t\t\t\t\tprojection.translate([xx, yy])\n\n\t\t\t\t\t\t\tthis.setRaw(\"translateX\", xx);\n\t\t\t\t\t\t\tthis.setRaw(\"translateY\", yy);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"wheelX\") || this.isDirty(\"wheelY\")) {\n\t\t\tthis._handleSetWheel();\n\t\t}\n\n\t\tif (this._dirtyGeometries) {\n\t\t\tthis._geometryColection.geometries = [];\n\n\t\t\tthis.series.each((series) => {\n\t\t\t\t$array.pushAll(this._geometryColection.geometries, series._geometries);\n\t\t\t})\n\n\t\t\tthis._fitMap();\n\t\t}\n\n\t\tif (this.isPrivateDirty(\"width\") || this.isPrivateDirty(\"height\") || this.isDirty(\"paddingTop\") || this.isDirty(\"paddingLeft\")) {\n\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tlet hw = w / 2;\n\t\t\t\tlet hh = h / 2;\n\n\t\t\t\tprojection.fitSize([w, h], this._geometryColection);\n\t\t\t\tconst newScale = projection.scale();\n\n\t\t\t\tthis.setPrivateRaw(\"mapScale\", newScale);\n\t\t\t\tprojection.scale(newScale * this.get(\"zoomLevel\", 1));\n\n\t\t\t\tif (this._centerLocation) {\n\t\t\t\t\tlet xy = projection(this._centerLocation);\n\t\t\t\t\tif (xy) {\n\t\t\t\t\t\tlet translate = projection.translate();\n\n\t\t\t\t\t\tlet xx = hw - ((xy[0] - translate[0]));\n\t\t\t\t\t\tlet yy = hh - ((xy[1] - translate[1]));\n\n\t\t\t\t\t\tprojection.translate([xx, yy])\n\n\t\t\t\t\t\tthis.setRaw(\"translateX\", xx);\n\t\t\t\t\t\tthis.setRaw(\"translateY\", yy);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.markDirtyProjection();\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"zoomControl\")) {\n\t\t\tconst previous = this._prevSettings.zoomControl;\n\t\t\tconst zoomControl = this.get(\"zoomControl\")!;\n\t\t\tif (zoomControl !== previous) {\n\t\t\t\tthis._disposeProperty(\"zoomControl\");\n\t\t\t\tif (previous) {\n\t\t\t\t\tprevious.dispose();\n\t\t\t\t}\n\t\t\t\tif (zoomControl) {\n\t\t\t\t\tzoomControl.setPrivate(\"chart\", this);\n\t\t\t\t\tthis.children.push(zoomControl);\n\t\t\t\t}\n\n\t\t\t\tthis.setRaw(\"zoomControl\", zoomControl);\n\t\t\t}\n\t\t}\n\n\t\tif (this.isDirty(\"zoomLevel\")) {\n\t\t\tprojection.scale(this.getPrivate(\"mapScale\") * this.get(\"zoomLevel\", 1));\n\t\t\tthis.markDirtyProjection();\n\t\t}\n\n\t\tif (this.isDirty(\"translateX\") || this.isDirty(\"translateY\")) {\n\t\t\tprojection.translate([this.get(\"translateX\", this.width() / 2), this.get(\"translateY\", this.height() / 2)])\n\t\t\tthis.markDirtyProjection();\n\t\t}\n\n\t\tif (projection.rotate) {\n\t\t\tif (this.isDirty(\"rotationX\") || this.isDirty(\"rotationY\") || this.isDirty(\"rotationZ\")) {\n\t\t\t\tprojection.rotate([this.get(\"rotationX\", 0), this.get(\"rotationY\", 0), this.get(\"rotationZ\", 0)])\n\t\t\t\tthis.markDirtyProjection();\n\t\t\t}\n\t\t}\n\n\t\tif (this._dispatchBounds) {\n\t\t\tthis._dispatchBounds = false; this\n\t\t\tconst type = \"geoboundschanged\";\n\t\t\tif (this.events.isEnabled(type)) {\n\t\t\t\tthis.events.dispatch(type, { type: type, target: this });\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Repositions the map to the \"home\" zoom level and center coordinates.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Resetting_position_level} for more info\n\t * @param  duration  Animation duration in milliseconds\n\t */\n\tpublic goHome(duration?: number) {\n\t\tlet homeGeoPoint = this.get(\"homeGeoPoint\");\n\t\tconst homeZoomLevel = this.get(\"homeZoomLevel\", 1);\n\n\t\tif (!homeGeoPoint) {\n\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\tconst bounds = geoPath.bounds(this._geometryColection);\n\n\t\t\tconst left = bounds[0][0];\n\t\t\tconst top = bounds[0][1];\n\n\t\t\tconst right = bounds[1][0];\n\t\t\tconst bottom = bounds[1][1];\n\n\t\t\thomeGeoPoint = this.invert({ x: left + (right - left) / 2, y: top + (bottom - top) / 2 });\n\t\t}\n\n\t\tthis.zoomToGeoPoint(homeGeoPoint, homeZoomLevel, true, duration);\n\t}\n\n\tpublic _updateChildren() {\n\t\tconst projection = this.get(\"projection\")!;\n\t\tif (projection.invert) {\n\t\t\tlet w = this.innerWidth();\n\t\t\tlet h = this.innerHeight();\n\t\t\tif (w > 0 && h > 0) {\n\t\t\t\tthis._centerLocation = projection.invert([this.innerWidth() / 2, this.innerHeight() / 2]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _fitMap() {\n\t\tconst projection = this.get(\"projection\")!;\n\n\t\tlet w = this.innerWidth();\n\t\tlet h = this.innerHeight();\n\t\tif (w > 0 && h > 0) {\n\t\t\tprojection.fitSize([w, h], this._geometryColection);\n\t\t\tthis.setPrivateRaw(\"mapScale\", projection.scale());\n\n\t\t\tconst translate = projection.translate();\n\t\t\tthis.setRaw(\"translateX\", translate[0]);\n\t\t\tthis.setRaw(\"translateY\", translate[1]);\n\n\t\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\t\tthis._mapBounds = geoPath.bounds(this._geometryColection);\n\n\t\t\tthis._geoCentroid = $mapUtils.getGeoCentroid(this._geometryColection);\n\n\t\t\tconst bounds = $mapUtils.getGeoBounds(this._geometryColection);\n\t\t\tthis._geoBounds = bounds;\n\n\t\t\tif (this._geometryColection.geometries.length > 0) {\n\n\t\t\t\tbounds.left = $math.round(this._geoBounds.left, 3);\n\t\t\t\tbounds.right = $math.round(this._geoBounds.right, 3);\n\t\t\t\tbounds.top = $math.round(this._geoBounds.top, 3);\n\t\t\t\tbounds.bottom = $math.round(this._geoBounds.bottom, 3);\n\n\t\t\t\tconst prevGeoBounds = this._prevGeoBounds;\n\n\t\t\t\tif (prevGeoBounds && !$utils.sameBounds(bounds, prevGeoBounds)) {\n\t\t\t\t\tthis._dispatchBounds = true;\n\t\t\t\t\tthis._prevGeoBounds = bounds;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyGeometries() {\n\t\tthis._dirtyGeometries = true;\n\t\tthis.markDirty();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.series.each((series) => {\n\t\t\tseries.markDirtyProjection();\n\t\t})\n\t}\n\n\tprotected _afterNew() {\n\t\tthis._settings.themeTags = $utils.mergeTags(this._settings.themeTags, [\"map\"]);\n\n\t\tsuper._afterNew();\n\n\t\tthis._makeGeoPath();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\n\t\tthis.set(\"width\", p100);\n\t\tthis.set(\"height\", p100);\n\n\t\tif (this.get(\"translateX\") == null) {\n\t\t\tthis.set(\"translateX\", this.width() / 2);\n\t\t}\n\t\tif (this.get(\"translateY\") == null) {\n\t\t\tthis.set(\"translateY\", this.height() / 2);\n\t\t}\n\n\t\t// Setting trasnparent background so that full body of the plot container\n\t\t// is interactive\n\t\tthis.chartContainer.set(\"interactive\", true);\n\t\tthis.chartContainer.set(\"interactiveChildren\", false);\n\t\tthis.chartContainer.set(\"background\", Rectangle.new(this._root, {\n\t\t\tthemeTags: [\"map\", \"background\"],\n\t\t\tfill: Color.fromHex(0x000000),\n\t\t\tfillOpacity: 0\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"pointerdown\", (event) => {\n\t\t\tthis._handleChartDown(event);\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"globalpointerup\", (event) => {\n\t\t\tthis._handleChartUp(event);\n\t\t}));\n\n\t\tthis._disposers.push(this.chartContainer.events.on(\"globalpointermove\", (event) => {\n\t\t\tthis._handleChartMove(event);\n\t\t}));\n\n\t\tlet license = false;\n\t\tfor (let i = 0; i < registry.licenses.length; i++) {\n\t\t\tif (registry.licenses[i].match(/^AM5M.{5,}/i)) {\n\t\t\t\tlicense = true;\n\t\t\t}\n\t\t}\n\t\tif (!license) {\n\t\t\tthis._root._showBranding();\n\t\t}\n\n\t}\n\n\tprotected _handleChartDown(event: ISpritePointerEvent) {\n\n\t\tthis._downZoomLevel = this.get(\"zoomLevel\", 1);\n\n\n\t\tlet count = $object.keys(this.chartContainer._downPoints).length;\n\t\tif (count > 0) {\n\t\t\tthis._downTranslateX = this.get(\"translateX\");\n\t\t\tthis._downTranslateY = this.get(\"translateY\");\n\t\t\tthis._downRotationX = this.get(\"rotationX\");\n\t\t\tthis._downRotationY = this.get(\"rotationY\");\n\t\t\tthis._downRotationZ = this.get(\"rotationZ\");\n\n\t\t\tconst downId = this.chartContainer._getDownPointId();\n\t\t\tif (downId) {\n\t\t\t\tlet movePoint = this._movePoints[downId];\n\t\t\t\tif (movePoint) {\n\t\t\t\t\tthis.chartContainer._downPoints[downId] = movePoint;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse if (count == 0) {\n\n\t\t\tlet bg = this.chartContainer.get(\"background\");\n\t\t\tif (bg) {\n\t\t\t\tbg.events.enableType(\"click\");\n\t\t\t}\n\n\t\t\tif (this.get(\"panX\") || this.get(\"panY\")) {\n\n\t\t\t\tif (this._za) {\n\t\t\t\t\tthis._za.stop();\n\t\t\t\t}\n\t\t\t\tif (this._txa) {\n\t\t\t\t\tthis._txa.stop();\n\t\t\t\t}\n\t\t\t\tif (this._tya) {\n\t\t\t\t\tthis._tya.stop();\n\t\t\t\t}\n\t\t\t\tif (this._rxa) {\n\t\t\t\t\tthis._rxa.stop();\n\t\t\t\t}\n\t\t\t\tif (this._rya) {\n\t\t\t\t\tthis._rya.stop();\n\t\t\t\t}\n\n\t\t\t\tconst downPoint = this.chartContainer._display.toLocal(event.point);\n\t\t\t\tthis._downTranslateX = this.get(\"translateX\");\n\t\t\t\tthis._downTranslateY = this.get(\"translateY\");\n\t\t\t\tthis._downRotationX = this.get(\"rotationX\");\n\t\t\t\tthis._downRotationY = this.get(\"rotationY\");\n\t\t\t\tthis._downRotationZ = this.get(\"rotationZ\");\n\n\t\t\t\tlet projection = this.get(\"projection\")!;\n\n\t\t\t\tif (projection.invert) {\n\t\t\t\t\tlet l0 = projection.invert([downPoint.x, downPoint.y]);\n\t\t\t\t\tlet l1 = projection.invert([downPoint.x + 1, downPoint.y + 1]);\n\t\t\t\t\tif (l0 && l1) {\n\t\t\t\t\t\tthis._pLon = Math.abs(l1[0] - l0[0]);\n\t\t\t\t\t\tthis._pLat = Math.abs(l1[1] - l0[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic invert(point: IPoint): IGeoPoint {\n\t\tlet projection = this.get(\"projection\")!;\n\n\t\tif (projection.invert) {\n\t\t\tconst ll = projection.invert([point.x, point.y]);\n\t\t\tif (ll) {\n\t\t\t\treturn { longitude: ll[0], latitude: ll[1] };\n\t\t\t}\n\t\t}\n\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic convert(point: IGeoPoint): IPoint {\n\t\tlet projection = this.get(\"projection\")!;\n\n\t\tconst xy = projection([point.longitude, point.latitude]);\n\n\t\tif (xy) {\n\t\t\treturn { x: xy[0], y: xy[1] };\n\t\t}\n\n\t\treturn { x: 0, y: 0 };\n\t}\n\n\tprotected _handleChartUp(_event: ISpritePointerEvent) {\n\t\tthis.chartContainer._downPoints = {}\n\t}\n\n\tprotected _handlePinch() {\n\t\tconst chartContainer = this.chartContainer;\n\t\tlet i = 0;\n\t\tlet downPoints: Array<IPoint> = [];\n\t\tlet movePoints: Array<IPoint> = [];\n\n\t\t$object.each(chartContainer._downPoints, (k, point) => {\n\t\t\tdownPoints[i] = point;\n\t\t\tlet movePoint = this._movePoints[k];\n\t\t\tif (movePoint) {\n\t\t\t\tmovePoints[i] = this._movePoints[k];\n\t\t\t}\n\t\t\ti++;\n\t\t});\n\n\t\tif (downPoints.length > 1 && movePoints.length > 1) {\n\t\t\tconst display = chartContainer._display;\n\n\t\t\tlet downPoint0 = downPoints[0];\n\t\t\tlet downPoint1 = downPoints[1];\n\n\t\t\tlet movePoint0 = movePoints[0];\n\t\t\tlet movePoint1 = movePoints[1];\n\n\t\t\tif (downPoint0 && downPoint1 && movePoint0 && movePoint1) {\n\n\t\t\t\tdownPoint0 = display.toLocal(downPoint0);\n\t\t\t\tdownPoint1 = display.toLocal(downPoint1);\n\n\t\t\t\tmovePoint0 = display.toLocal(movePoint0);\n\t\t\t\tmovePoint1 = display.toLocal(movePoint1);\n\n\t\t\t\tlet initialDistance = Math.hypot(downPoint1.x - downPoint0.x, downPoint1.y - downPoint0.y);\n\t\t\t\tlet currentDistance = Math.hypot(movePoint1.x - movePoint0.x, movePoint1.y - movePoint0.y);\n\n\t\t\t\tlet level = currentDistance / initialDistance * this._downZoomLevel;\n\n\t\t\t\tlet moveCenter = { x: movePoint0.x + (movePoint1.x - movePoint0.x) / 2, y: movePoint0.y + (movePoint1.y - movePoint0.y) / 2 };\n\t\t\t\tlet downCenter = { x: downPoint0.x + (downPoint1.x - downPoint0.x) / 2, y: downPoint0.y + (downPoint1.y - downPoint0.y) / 2 };\n\n\t\t\t\tlet tx = this._downTranslateX || 0;\n\t\t\t\tlet ty = this._downTranslateY || 0;\n\n\t\t\t\tlet zoomLevel = this._downZoomLevel;\n\n\t\t\t\tlet xx = moveCenter.x - (moveCenter.x - tx - moveCenter.x + downCenter.x) / zoomLevel * level;\n\t\t\t\tlet yy = moveCenter.y - (moveCenter.y - ty - moveCenter.y + downCenter.y) / zoomLevel * level;\n\n\t\t\t\tthis.set(\"zoomLevel\", level);\n\t\t\t\tthis.set(\"translateX\", xx);\n\t\t\t\tthis.set(\"translateY\", yy);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleChartMove(event: ISpritePointerEvent) {\n\t\tconst chartContainer = this.chartContainer;\n\t\tlet downPoint = chartContainer._getDownPoint();\n\t\tconst downPointId = chartContainer._getDownPointId();\n\t\tconst originalEvent = event.originalEvent as any;\n\n\t\tconst pointerId = originalEvent.pointerId;\n\n\t\tif (this.get(\"pinchZoom\")) {\n\t\t\tif (pointerId) {\n\t\t\t\tthis._movePoints[pointerId] = event.point;\n\n\t\t\t\tif ($object.keys(chartContainer._downPoints).length > 1) {\n\t\t\t\t\tthis._handlePinch();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (downPointId && pointerId && pointerId != downPointId) {\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (downPoint) {\n\t\t\t\tconst panX = this.get(\"panX\");\n\t\t\t\tconst panY = this.get(\"panY\");\n\t\t\t\tif (panX != \"none\" || panY != \"none\") {\n\t\t\t\t\tconst display = chartContainer._display;\n\t\t\t\t\tlet local = display.toLocal(event.point);\n\t\t\t\t\tdownPoint = display.toLocal(downPoint);\n\n\t\t\t\t\tlet x = this._downTranslateX;\n\t\t\t\t\tlet y = this._downTranslateY;\n\n\t\t\t\t\tif (Math.hypot(downPoint.x - local.x, downPoint.y - local.y) > 5) {\n\t\t\t\t\t\tlet bg = chartContainer.get(\"background\");\n\t\t\t\t\t\tif (bg) {\n\t\t\t\t\t\t\tbg.events.disableType(\"click\");\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ($type.isNumber(x) && $type.isNumber(y)) {\n\t\t\t\t\t\t\tlet projection = this.get(\"projection\")!;\n\n\t\t\t\t\t\t\tif (panX == \"translateX\") {\n\t\t\t\t\t\t\t\tx += local.x - downPoint.x;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (panY == \"translateY\") {\n\t\t\t\t\t\t\t\ty += local.y - downPoint.y;\n\t\t\t\t\t\t\t}\n\n/*\t\t\t\t\t\t\tconst bounds = this._mapBounds;\n\n\t\t\t\t\t\t\tconst w = this.width();\n\t\t\t\t\t\t\tconst h = this.height();\n\n\t\t\t\t\t\t\tconst ww = bounds[1][0] - bounds[0][0];\n\t\t\t\t\t\t\tconst hh = bounds[1][1] - bounds[0][1];\n\n\t\t\t\t\t\t\tconst zoomLevel = this.get(\"zoomLevel\", 1);\n\n\t\t\t\t\t\t\tconst maxPanOut = 1 - Math.min(1, this.get(\"maxPanOut\", 0));\n\n\t\t\t\t\t\t\tlet center = this.convert(this.geoCentroid());\n\n\t\t\t\t\t\t\tif (panX == \"translateX\") {\n\t\t\t\t\t\t\t\t//x = Math.min(x, w / 2 + (ww / 2 - 1) * zoomLevel - ww / 2 * maxPanOut);\n\t\t\t\t\t\t\t\t//x = Math.max(x, w / 2 - (ww / 2 - 1) * zoomLevel + ww / 2 * maxPanOut);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (panY == \"translateY\") {\n\t\t\t\t\t\t\t\t//y = Math.min(y, h / 2 + (hh / 2 - 1) * zoomLevel - hh / 2 * maxPanOut);\n\t\t\t\t\t\t\t\t//y = Math.max(y, h / 2 - (hh / 2 - 1) * zoomLevel + hh / 2 * maxPanOut);\n\t\t\t\t\t\t\t}\n*/\n\t\t\t\t\t\t\tthis.set(\"translateX\", x);\n\t\t\t\t\t\t\tthis.set(\"translateY\", y);\n\n\t\t\t\t\t\t\tif (projection.invert) {\n\t\t\t\t\t\t\t\tlet downLocation = projection.invert([downPoint.x, downPoint.y]);\n\t\t\t\t\t\t\t\tif (location && downLocation) {\n\t\t\t\t\t\t\t\t\tif (panX == \"rotateX\") {\n\t\t\t\t\t\t\t\t\t\tthis.set(\"rotationX\", this._downRotationX! - (downPoint.x - local.x) * this._pLon);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif (panY == \"rotateY\") {\n\t\t\t\t\t\t\t\t\t\tthis.set(\"rotationY\", this._downRotationY! + (downPoint.y - local.y) * this._pLat);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _handleWheelRotateY(delta: number, duration: number, easing: (t: Time) => Time) {\n\t\tthis._rya = this.animate({ key: \"rotationY\", to: this.get(\"rotationY\", 0) - delta, duration: duration, easing: easing });\n\t}\n\n\tprotected _handleWheelRotateX(delta: number, duration: number, easing: (t: Time) => Time) {\n\t\tthis._rxa = this.animate({ key: \"rotationX\", to: this.get(\"rotationX\", 0) - delta, duration: duration, easing: easing });\n\t}\n\n\tprotected _handleWheelZoom(delta: number, point: IPoint) {\n\t\tlet step = this.get(\"zoomStep\", 2);\n\t\tlet zoomLevel = this.get(\"zoomLevel\", 1);\n\t\tlet newZoomLevel = zoomLevel;\n\t\tif (delta > 0) {\n\t\t\tnewZoomLevel = zoomLevel / step;\n\t\t}\n\t\telse if (delta < 0) {\n\t\t\tnewZoomLevel = zoomLevel * step;\n\t\t}\n\n\t\tif (newZoomLevel != zoomLevel) {\n\t\t\tthis.zoomToPoint(point, newZoomLevel)\n\t\t}\n\t}\n\n\t/**\n\t * Zoom the map to geographical bounds.\n\t *\n\t * @param  geoBounds  Bounds\n\t * @param  duration   Animation duration in milliseconds\n\t */\n\tpublic zoomToGeoBounds(geoBounds: { left: number, right: number, top: number, bottom: number }, duration?: number) {\n\t\tif (geoBounds.right < geoBounds.left) {\n\t\t\tgeoBounds.right = 180;\n\t\t\tgeoBounds.left = -180;\n\t\t}\n\n\t\tconst geoPath = this.getPrivate(\"geoPath\");\n\t\tconst mapBounds = geoPath.bounds(this._geometryColection);\n\n\t\tlet p0 = this.convert({ longitude: geoBounds.left, latitude: geoBounds.top });\n\t\tlet p1 = this.convert({ longitude: geoBounds.right, latitude: geoBounds.bottom });\n\n\t\tif (p0.y < mapBounds[0][1]) {\n\t\t\tp0.y = mapBounds[0][1];\n\t\t}\n\n\t\tif (p1.y > mapBounds[1][1]) {\n\t\t\tp1.y = mapBounds[1][1];\n\t\t}\n\n\t\tlet zl = this.get(\"zoomLevel\", 1);\n\n\t\tlet bounds = { left: p0.x, right: p1.x, top: p0.y, bottom: p1.y };\n\n\t\tlet seriesContainer = this.seriesContainer;\n\n\t\tlet zoomLevel = .9 * Math.min(seriesContainer.innerWidth() / (bounds.right - bounds.left) * zl, seriesContainer.innerHeight() / (bounds.bottom - bounds.top) * zl);\n\t\tlet x = bounds.left + (bounds.right - bounds.left) / 2;\n\t\tlet y = bounds.top + (bounds.bottom - bounds.top) / 2;\n\n\t\tlet geoPoint = this.invert({ x, y });\n\n\t\tthis.zoomToGeoPoint(geoPoint, zoomLevel, true, duration);\n\t}\n\n\t/**\n\t * Zooms the map to specific screen point.\n\t *\n\t * @param  point    Point\n\t * @param  level    Zoom level\n\t * @param  center   Center the map\n\t * @param  duration Duration of the animation in milliseconds\n\t */\n\tpublic zoomToPoint(point: IPoint, level: number, center?: boolean, duration?: number) {\n\t\tif (level) {\n\t\t\tlevel = $math.fitToRange(level, this.get(\"minZoomLevel\", 1), this.get(\"maxZoomLevel\", 32));\n\t\t}\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"animationDuration\", 0);\n\t\t}\n\t\tconst easing = this.get(\"animationEasing\");\n\t\tconst zoomLevel = this.get(\"zoomLevel\", 1);\n\n\t\tlet x = point.x;\n\t\tlet y = point.y;\n\n\t\tlet tx = this.get(\"translateX\", 0);\n\t\tlet ty = this.get(\"translateY\", 0);\n\n\t\tlet cx = x;\n\t\tlet cy = y;\n\n\t\tif (center) {\n\t\t\tcx = this.width() / 2;\n\t\t\tcy = this.height() / 2;\n\t\t}\n\n\t\tlet xx = cx - ((x - tx) / zoomLevel * level);\n\t\tlet yy = cy - ((y - ty) / zoomLevel * level);\n\n\t\tthis._txa = this.animate({ key: \"translateX\", to: xx, duration: duration, easing: easing });\n\t\tthis._tya = this.animate({ key: \"translateY\", to: yy, duration: duration, easing: easing });\n\t\tthis._za = this.animate({ key: \"zoomLevel\", to: level, duration: duration, easing: easing });\n\n\t\tif (zoomLevel != level) {\n\t\t\tthis._root.readerAlert(this._t(\"Zoom level changed to %1\", this._root.locale, $type.numberToString(level)));\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the map to specific geographical point.\n\t *\n\t * @param  geoPoint  Point\n\t * @param  level     Zoom level\n\t * @param  center    Center the map\n\t * @param  duration  Duration of the animation in milliseconds\n\t */\n\tpublic zoomToGeoPoint(geoPoint: IGeoPoint, level: number, center?: boolean, duration?: number) {\n\t\tconst xy = this.convert(geoPoint);\n\t\tif (xy) {\n\t\t\tthis.zoomToPoint(xy, level, center, duration);\n\t\t}\n\t}\n\n\t/**\n\t * Zooms the map in.\n\t */\n\tpublic zoomIn() {\n\t\tthis.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.get(\"zoomLevel\", 1) * this.get(\"zoomStep\", 2));\n\t}\n\n\t/**\n\t * Zooms the map out.\n\t */\n\tpublic zoomOut() {\n\t\tthis.zoomToPoint({ x: this.width() / 2, y: this.height() / 2 }, this.get(\"zoomLevel\", 1) / this.get(\"zoomStep\", 2));\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._dirtyGeometries = false;\n\t}\n}\n","import identity from \"../identity.js\";\nimport stream from \"../stream.js\";\nimport pathArea from \"./area.js\";\nimport pathBounds from \"./bounds.js\";\nimport pathCentroid from \"./centroid.js\";\nimport PathContext from \"./context.js\";\nimport pathMeasure from \"./measure.js\";\nimport PathString from \"./string.js\";\n\nexport default function(projection, context) {\n  var pointRadius = 4.5,\n      projectionStream,\n      contextStream;\n\n  function path(object) {\n    if (object) {\n      if (typeof pointRadius === \"function\") contextStream.pointRadius(+pointRadius.apply(this, arguments));\n      stream(object, projectionStream(contextStream));\n    }\n    return contextStream.result();\n  }\n\n  path.area = function(object) {\n    stream(object, projectionStream(pathArea));\n    return pathArea.result();\n  };\n\n  path.measure = function(object) {\n    stream(object, projectionStream(pathMeasure));\n    return pathMeasure.result();\n  };\n\n  path.bounds = function(object) {\n    stream(object, projectionStream(pathBounds));\n    return pathBounds.result();\n  };\n\n  path.centroid = function(object) {\n    stream(object, projectionStream(pathCentroid));\n    return pathCentroid.result();\n  };\n\n  path.projection = function(_) {\n    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;\n  };\n\n  path.context = function(_) {\n    if (!arguments.length) return context;\n    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);\n    if (typeof pointRadius !== \"function\") contextStream.pointRadius(pointRadius);\n    return path;\n  };\n\n  path.pointRadius = function(_) {\n    if (!arguments.length) return pointRadius;\n    pointRadius = typeof _ === \"function\" ? _ : (contextStream.pointRadius(+_), +_);\n    return path;\n  };\n\n  return path.projection(projection).context(context);\n}\n","import type { IMapLineSeriesDataItem, MapLineSeries } from \"./MapLineSeries\";\nimport type { IMapPolygonSeriesDataItem, MapPolygonSeries } from \"./MapPolygonSeries\";\nimport type { Bullet } from \"../../core/render/Bullet\";\nimport type { DataItem } from \"../../core/render/Component\";\nimport type { MapLine } from \"./MapLine\";\nimport type { MapPolygon } from \"./MapPolygon\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IMapPointSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapPointSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * GeoJSON geometry of the point.\n\t */\n\tgeometry?: GeoJSON.Point | GeoJSON.MultiPoint;\n\n\t/**\n\t * Longitude.\n\t */\n\tlongitude?: number;\n\n\t/**\n\t * Latitude.\n\t */\n\tlatitude?: number;\n\n\t/**\n\t * Relative position (0-1) on the [[MapLine]] to place point on.\n\t */\n\tpositionOnLine?: number;\n\n\t/**\n\t * Automatically rotate the point bullet to face the direction of the line\n\t * it is attached to.\n\t */\n\tautoRotate?: boolean;\n\n\t/**\n\t * The angle will be added to the automatically-calculated angle.\n\t *\n\t * Can be used to reverse the direction.\n\t */\n\tautoRotateAngle?: number;\n\n\t/**\n\t * A data item from a [[MapLineSeries]] the point is attached to.\n\t */\n\tlineDataItem?: DataItem<IMapLineSeriesDataItem>;\n\n\t/**\n\t * An ID of a [[MapLine]] the point is attached to.\n\t */\n\tlineId?: string;\n\n\t/**\n\t * A data item from a [[MapPolygonSeries]] to use for positioning of the\n\t * point.\n\t */\n\tpolygonDataItem?: DataItem<IMapPolygonSeriesDataItem>;\n\n\t/**\n\t * An ID of the [[MapPolygon]] to use for centering the point.\n\t */\n\tpolygonId?: string;\n}\n\nexport interface IMapPointSeriesSettings extends IMapSeriesSettings {\n\n\t/**\n\t * A field in data that holds an ID of the related polygon.\n\t *\n\t * If set, the point will be positioned in the visual center of the target\n\t * polygon.\n\t */\n\tpolygonIdField?: string;\n\n\t/**\n\t * If set to `true` will hide all points that are in the visible range of\n\t * the map.\n\t */\n\tclipFront?: boolean;\n\n\t/**\n\t * If set to `true` will hide all points that are in the invisible range of\n\t * the map.\n\t *\n\t * For example on the side of the globe facing away from the viewer when\n\t * used with Orthographic projection.\n\t *\n\t * NOTE: not all projections have invisible side.\n\t *\n\t * @default true\n\t */\n\tclipBack?: boolean;\n\n};\n\n/**\n * Creates a map series for displaying markers on the map.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-point-series/} for more info\n * @important\n */\nexport class MapPointSeries extends MapSeries {\n\n\tpublic static className: string = \"MapPointSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapPointSeries.className]);\n\n\tdeclare public _settings: IMapPointSeriesSettings;\n\tdeclare public _privateSettings: IMapPointSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapPointSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"Point\", \"MultiPoint\"];\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"polygonId\", \"lineId\");\n\t\tsuper._afterNew();\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t}\n\n\tpublic _markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._markDirtyValues();\n\n\t\tif (dataItem) {\n\t\t\tthis._positionBullets(dataItem);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\t\tconst geometry = dataItem.get(\"geometry\");\n\t\tif (!geometry) {\n\t\t\tdataItem.set(\"geometry\", { type: \"Point\", coordinates: [dataItem.get(\"longitude\", 0), dataItem.get(\"latitude\", 0)] });\n\t\t}\n\t\telse {\n\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates) {\n\t\t\t\t\tdataItem.set(\"longitude\", coordinates[0]);\n\t\t\t\t\tdataItem.set(\"latitude\", coordinates[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (geometry.type == \"MultiPoint\") {\n\t\t\t\tconst coordinates = geometry.coordinates;\n\t\t\t\tif (coordinates && coordinates[0]) {\n\t\t\t\t\tdataItem.set(\"longitude\", coordinates[0][0]);\n\t\t\t\t\tdataItem.set(\"latitude\", coordinates[0][1]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _makeBullets(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tdataItem.bullets = [];\n\n\t\tthis.bullets.each((bulletFunction) => {\n\t\t\tconst geometry = dataItem.get(\"geometry\");\n\n\t\t\tif (geometry) {\n\t\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\t\tthis._makeBullet(dataItem, bulletFunction);\n\t\t\t\t}\n\t\t\t\telse if (geometry.type = \"MultiPoint\") {\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\t$array.each(geometry.coordinates, () => {\n\t\t\t\t\t\tthis._makeBullet(dataItem, bulletFunction, i);\n\t\t\t\t\t\ti++;\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _positionBullet(bullet: Bullet) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tif (sprite) {\n\t\t\tconst dataItem = sprite.dataItem as DataItem<this[\"_dataItemSettings\"]>;\n\n\t\t\tconst latitude = dataItem.get(\"latitude\");\n\t\t\tconst longitude = dataItem.get(\"longitude\");\n\t\t\tconst lineDataItem = dataItem.get(\"lineDataItem\");\n\t\t\tconst chart = this.chart;\n\t\t\tlet line: MapLine | undefined;\n\t\t\tif (lineDataItem) {\n\t\t\t\tline = lineDataItem.get(\"mapLine\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst lineId = dataItem.get(\"lineId\");\n\n\t\t\t\tif (lineId && chart) {\n\t\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\t\tif (series.isType<MapLineSeries>(\"MapLineSeries\")) {\n\t\t\t\t\t\t\tlet lineDI = series.getDataItemById(lineId);\n\t\t\t\t\t\t\tif (lineDI) {\n\t\t\t\t\t\t\t\tdataItem.set(\"lineDataItem\", lineDI);\n\t\t\t\t\t\t\t\tline = lineDI.get(\"mapLine\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tconst polygonDataItem = dataItem.get(\"polygonDataItem\");\n\t\t\tlet polygon: MapPolygon | undefined;\n\t\t\tif (polygonDataItem) {\n\t\t\t\tpolygon = polygonDataItem.get(\"mapPolygon\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst polygonId = dataItem.get(\"polygonId\");\n\n\t\t\t\tif (polygonId && chart) {\n\t\t\t\t\tchart.series.each((series) => {\n\t\t\t\t\t\tif (series.isType<MapPolygonSeries>(\"MapPolygonSeries\")) {\n\t\t\t\t\t\t\tlet polygonDI = series.getDataItemById(polygonId);\n\t\t\t\t\t\t\tif (polygonDI) {\n\t\t\t\t\t\t\t\tdataItem.set(\"polygonDataItem\", polygonDI);\n\t\t\t\t\t\t\t\tpolygon = polygonDI.get(\"mapPolygon\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst positionOnLine = dataItem.get(\"positionOnLine\");\n\t\t\tlet coordinates: [number, number] | undefined;\n\n\t\t\tlet angle: number | undefined;\n\n\t\t\tif (polygon) {\n\t\t\t\tlet geoPoint = polygon.visualCentroid();\n\t\t\t\tcoordinates = [geoPoint.longitude, geoPoint.latitude];\n\t\t\t}\n\t\t\telse if (line && $type.isNumber(positionOnLine)) {\n\t\t\t\tlet geoPoint = line.positionToGeoPoint(positionOnLine);\n\t\t\t\tcoordinates = [geoPoint.longitude, geoPoint.latitude];\n\n\t\t\t\tif (dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\")) && chart) {\n\t\t\t\t\tconst geoPoint0 = line.positionToGeoPoint(positionOnLine - 0.002);\n\t\t\t\t\tconst geoPoint1 = line.positionToGeoPoint(positionOnLine + 0.002);\n\n\t\t\t\t\tconst point0 = chart.convert(geoPoint0);\n\t\t\t\t\tconst point1 = chart.convert(geoPoint1);\n\n\t\t\t\t\t//dataItem.set(\"autoRotateAngle\", $math.getAngle(point0, point1));\n\t\t\t\t\tangle = $math.getAngle(point0, point1);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if ($type.isNumber(longitude) && $type.isNumber(latitude)) {\n\t\t\t\tcoordinates = [longitude, latitude];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst geometry = dataItem.get(\"geometry\")!;\n\t\t\t\tif (geometry) {\n\t\t\t\t\tif (geometry.type == \"Point\") {\n\t\t\t\t\t\tthis._positionBulletReal(bullet, geometry, geometry.coordinates as [number, number], angle);\n\t\t\t\t\t}\n\t\t\t\t\telse if (geometry.type == \"MultiPoint\") {\n\t\t\t\t\t\tlet index = bullet._index || 0;\n\t\t\t\t\t\tcoordinates = geometry.coordinates[index] as [number, number];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (coordinates) {\n\t\t\t\tthis._positionBulletReal(bullet, { type: \"Point\", coordinates: coordinates }, coordinates, angle);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _positionBulletReal(bullet: Bullet, geometry: GeoJSON.Geometry, coordinates: [number, number], angle?: number) {\n\t\tconst sprite = bullet.get(\"sprite\");\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tconst projection = chart.get(\"projection\")!;\n\t\t\tconst geoPath = chart.getPrivate(\"geoPath\");\n\t\t\tconst dataItem: DataItem<IMapPointSeriesDataItem> = sprite.dataItem as DataItem<IMapPointSeriesDataItem>;\n\n\t\t\tconst xy = projection(coordinates as any);\n\n\t\t\tif (xy) {\n\t\t\t\tsprite.set(\"x\", xy[0]);\n\t\t\t\tsprite.set(\"y\", xy[1]);\n\n\t\t\t}\n\n\t\t\tlet visible = true;\n\t\t\tif (geoPath(geometry)) {\n\t\t\t\tif (this.get(\"clipFront\")) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (this.get(\"clipBack\")) {\n\t\t\t\t\tvisible = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsprite.setPrivate(\"visible\", visible);\n\n\t\t\tif (dataItem && angle != null && dataItem.get(\"autoRotate\", bullet.get(\"autoRotate\"))) {\n\t\t\t\tsprite.set(\"rotation\", angle + dataItem.get(\"autoRotateAngle\", bullet.get(\"autoRotateAngle\", 0)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Centers the map to specific series' data item and zooms to the level\n\t * specified in the parameters.\n\t *\n\t * @param  dataItem   Map point\n\t * @param  zoomLevel  Zoom level\n\t */\n\tpublic zoomToDataItem(dataItem: DataItem<IMapPointSeriesDataItem>, zoomLevel: number) {\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\t\t\tchart.zoomToGeoPoint({ longitude: dataItem.get(\"longitude\", 0), latitude: dataItem.get(\"latitude\", 0) }, zoomLevel, true);\n\t\t}\n\t}\n\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { MapPolygonSeries } from \"./MapPolygonSeries\";\nimport type { IGeoPoint } from \"../../core/util/IGeoPoint\";\nimport type { IPoint } from \"../../core/util/IPoint\";\nimport * as $mapUtils from \"./MapUtils\";\nimport $polylabel from \"polylabel\";\nimport { geoArea } from \"d3-geo\";\n\nexport interface IMapPolygonSettings extends IGraphicsSettings {\n\n\t/**\n\t * A GeoJSON representation of the polygons geometry.\n\t */\n\tgeometry?: GeoJSON.MultiPolygon | GeoJSON.Polygon;\n\n\t/**\n\t * @todo needs description\n\t * @default 0.5\n\t */\n\tprecision?: number;\n\n}\n\nexport interface IMapPolygonPrivate extends IGraphicsPrivate {\n}\n\n/**\n * A polygon in a [[MapPolygonSeries]].\n */\nexport class MapPolygon extends Graphics {\n\n\tdeclare public _settings: IMapPolygonSettings;\n\tdeclare public _privateSettings: IMapPolygonPrivate;\n\n\tpublic static className: string = \"MapPolygon\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([MapPolygon.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\t/**\n\t * A [[MapPolygonSeries]] polygon belongs to.\n\t */\n\tpublic series: MapPolygonSeries | undefined;\n\n\tpublic _beforeChanged() {\n\t\tsuper._beforeChanged();\n\n\t\tif (this._projectionDirty || this.isDirty(\"geometry\") || this.isDirty(\"precision\")) {\n\t\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\t\tif (geometry) {\n\t\t\t\tconst series = this.series;\n\t\t\t\tif (series) {\n\t\t\t\t\tconst projection = series.projection();\n\t\t\t\t\tif (projection) {\n\t\t\t\t\t\tprojection.precision(this.get(\"precision\", 0.5));\n\t\t\t\t\t}\n\n\t\t\t\t\tconst geoPath = series.geoPath();\n\n\t\t\t\t\tif (geoPath) {\n\t\t\t\t\t\tthis._clear = true;\n\n\t\t\t\t\t\tthis.set(\"draw\", (_display) => {\n\t\t\t\t\t\t\tgeoPath.context(this._display as any);\n\t\t\t\t\t\t\tgeoPath(geometry);\n\t\t\t\t\t\t\tgeoPath.context(null);\n\t\t\t\t\t\t})\n\n\t\t\t\t\t\tif (this.isHover()) {\n\t\t\t\t\t\t\tthis.showTooltip();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\tthis.markDirty();\n\t\tthis._projectionDirty = true;\n\t}\n\n\tpublic _clearDirty() {\n\t\tsuper._clearDirty();\n\t\tthis._projectionDirty = false;\n\t}\n\n\t/**\n\t * Returns latitude/longitude of the geometrical center of the polygon.\n\t *\n\t * @return Center\n\t */\n\tpublic geoCentroid(): IGeoPoint {\n\t\tconst geometry = this.get(\"geometry\")!;\n\t\tif (geometry) {\n\t\t\treturn $mapUtils.getGeoCentroid(geometry);\n\t\t}\n\t\telse {\n\t\t\treturn { latitude: 0, longitude: 0 };\n\t\t}\n\t}\n\n\t/**\n\t * Returns latitude/longitude of the visual center of the polygon.\n\t *\n\t * @return Center\n\t */\n\tpublic visualCentroid(): IGeoPoint {\n\n\t\tlet biggestArea = 0;\n\t\tlet coordinates: number[][][] = [];\n\t\tconst geometry = this.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tif (geometry.type == \"Polygon\") {\n\t\t\t\tcoordinates = geometry.coordinates as number[][][];\n\t\t\t}\n\t\t\telse if (geometry.type == \"MultiPolygon\") {\n\t\t\t\tif (geometry.coordinates.length > 1) {\n\t\t\t\t\tfor (let i = 0; i < geometry.coordinates.length; i++) {\n\t\t\t\t\t\tlet coords = geometry.coordinates[i] as number[][][];\n\t\t\t\t\t\tlet area = geoArea({ type: \"Polygon\", coordinates: coords });\n\n\t\t\t\t\t\tif (area > biggestArea) {\n\t\t\t\t\t\t\tcoordinates = coords;\n\t\t\t\t\t\t\tbiggestArea = area;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet center = $polylabel(coordinates as number[][][]);\n\t\t\treturn { longitude: center[0], latitude: center[1] };\n\n\t\t}\n\t\treturn { longitude: 0, latitude: 0 };\n\t}\n\n\n\tpublic _getTooltipPoint(): IPoint {\n\t\tconst series = this.series;\n\n\t\tif (series) {\n\t\t\tconst projection = series.projection();\n\t\t\tif (projection) {\n\t\t\t\tconst geoPoint = this.visualCentroid();\n\t\t\t\tconst xy = projection([geoPoint.longitude, geoPoint.latitude]);\n\n\t\t\t\tif (xy) {\n\t\t\t\t\treturn { x: xy[0], y: xy[1] }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { x: 0, y: 0 };\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\n\nimport { MapSeries, IMapSeriesSettings, IMapSeriesDataItem, IMapSeriesPrivate } from \"./MapSeries\";\nimport { MapPolygon } from \"./MapPolygon\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $mapUtils from \"./MapUtils\";\n\nexport interface IMapPolygonSeriesPrivate extends IMapSeriesPrivate {\n}\n\nexport interface IMapPolygonSeriesDataItem extends IMapSeriesDataItem {\n\n\t/**\n\t * Related [[MapPolygon]] object.\n\t */\n\tmapPolygon: MapPolygon;\n\n\t/**\n\t * GeoJSON geometry of the polygon.\n\t */\n\tgeometry?: GeoJSON.Polygon | GeoJSON.MultiPolygon;\n\n}\n\nexport interface IMapPolygonSeriesSettings extends IMapSeriesSettings {\n\n}\n\n/**\n * Creates a map series for displaying polygons.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-polygon-series/} for more info\n * @important\n */\nexport class MapPolygonSeries extends MapSeries {\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeMapPolygon(dataItem: DataItem<this[\"_dataItemSettings\"]>): MapPolygon {\n\t\tconst mapPolygon = this.children.push(this.mapPolygons.make());\n\t\tmapPolygon._setDataItem(dataItem);\n\t\tthis.mapPolygons.push(mapPolygon);\n\t\treturn mapPolygon;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all polygons in series.\n\t *\n\t * `mapPolygons.template` can also be used to configure polygons.\n\t *\n\t * @default new ListTemplate<MapPolygon>\n\t */\n\tpublic readonly mapPolygons: ListTemplate<MapPolygon> = new ListTemplate(\n\t\tTemplate.new({}),\n\t\t() => MapPolygon._new(this._root, {}, [this.mapPolygons.template])\n\t);\n\n\tpublic static className: string = \"MapPolygonSeries\";\n\tpublic static classNames: Array<string> = MapSeries.classNames.concat([MapPolygonSeries.className]);\n\n\tdeclare public _settings: IMapPolygonSeriesSettings;\n\tdeclare public _privateSettings: IMapPolygonSeriesPrivate;\n\tdeclare public _dataItemSettings: IMapPolygonSeriesDataItem;\n\n\tprotected _types: Array<GeoJSON.GeoJsonGeometryTypes> = [\"Polygon\", \"MultiPolygon\"];\n\n\t/**\n\t * @ignore\n\t */\n\tpublic markDirtyProjection() {\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tlet mapPolygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (mapPolygon) {\n\t\t\t\tmapPolygon.markDirtyProjection();\n\t\t\t}\n\t\t})\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isDirty(\"fill\")) {\n\t\t\tthis.mapPolygons.template.set(\"fill\", this.get(\"fill\"));\n\t\t}\n\t\tif (this.isDirty(\"stroke\")) {\n\t\t\tthis.mapPolygons.template.set(\"stroke\", this.get(\"stroke\"));\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tlet mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (!mapPolygon) {\n\t\t\tmapPolygon = this.makeMapPolygon(dataItem);\n\t\t}\n\n\t\tdataItem.set(\"mapPolygon\", mapPolygon);\n\t\tconst geometry = dataItem.get(\"geometry\")!;\n\n\t\tif (geometry) {\n\t\t\tmapPolygon.set(\"geometry\", geometry);\n\t\t}\n\n\t\tmapPolygon.series = this;\n\n\t\tthis._addGeometry(dataItem.get(\"geometry\"));\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\tif (mapPolygon) {\n\t\t\tthis.mapPolygons.removeValue(mapPolygon);\n\t\t\tmapPolygon.dispose();\n\t\t}\n\t\tthis._removeGeometry(dataItem.get(\"geometry\"));\n\t}\n\n\n\tpublic _markDirtyValues(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper._markDirtyValues();\n\t\tif (dataItem) {\n\t\t\tconst mapPolygon = dataItem.get(\"mapPolygon\");\n\t\t\tif (mapPolygon) {\n\t\t\t\tmapPolygon.set(\"geometry\", dataItem.get(\"geometry\"));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Centers and zooms in on the specific polygon.\n\t *\n\t * @param  dataItem  Target data item\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zooming_to_clicked_object} for more info\n\t */\n\tpublic zoomToDataItem(dataItem: DataItem<IMapPolygonSeriesDataItem>) {\n\t\tconst polygon = dataItem.get(\"mapPolygon\");\n\t\tif (polygon) {\n\t\t\tconst geometry = polygon.get(\"geometry\");\n\t\t\tconst chart = this.chart;\n\t\t\tif (geometry && chart) {\n\t\t\t\tchart.zoomToGeoBounds($mapUtils.getGeoBounds(geometry));\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { MapChart } from \"./MapChart\";\n\nimport { Container, IContainerPrivate, IContainerSettings } from \"../../core/render/Container\";\nimport { Button } from \"../../core/render/Button\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100 } from \"../../core/util/Percent\";\nimport { MultiDisposer } from \"../../core/util/Disposer\";\n\nexport interface IZoomControlSettings extends IContainerSettings {\n\n}\n\nexport interface IZoomControlPrivate extends IContainerPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tchart?: MapChart;\n\n}\n\n/**\n * A control that displays button for zooming [[MapChart]] in and out.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/map-chart/map-pan-zoom/#Zoom_control} for more information\n * @important\n */\nexport class ZoomControl extends Container {\n\n\t/**\n\t * A [[Button]] for zoom in.\n\t *\n\t * @default Button.new()\n\t */\n\tpublic readonly plusButton: Button = this.children.push(Button.new(this._root, { width: 36, height: 36, themeTags: [\"plus\"] }));\n\n\t/**\n\t * A [[Button]] for zoom out.\n\t *\n\t * @default Button.new()\n\t */\n\tpublic readonly minusButton: Button = this.children.push(Button.new(this._root, { width: 36, height: 36, themeTags: [\"minus\"] }));\n\n\tdeclare public _settings: IZoomControlSettings;\n\tdeclare public _privateSettings: IZoomControlPrivate;\n\n\tpublic static className: string = \"ZoomControl\";\n\tpublic static classNames: Array<string> = Container.classNames.concat([ZoomControl.className]);\n\n\tprotected _disposer: MultiDisposer | undefined;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.set(\"position\", \"absolute\");\n\n\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\tthis.set(\"x\", p100);\n\t\tthis.set(\"centerX\", p100);\n\n\t\tthis.set(\"y\", p100);\n\t\tthis.set(\"centerY\", p100);\n\n\t\tthis.set(\"paddingRight\", 10);\n\t\tthis.set(\"paddingBottom\", 10);\n\n\t\tthis.plusButton.setAll({\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\n\t\t\tlayout: undefined\n\t\t});\n\n\t\tthis.minusButton.setAll({\n\t\t\ticon: Graphics.new(this._root, { themeTags: [\"icon\"] }),\n\t\t\tlayout: undefined\n\t\t});\n\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tif (this.isPrivateDirty(\"chart\")) {\n\t\t\tconst chart = this.getPrivate(\"chart\");\n\t\t\tconst previous = this._prevPrivateSettings.chart;\n\t\t\tif (chart) {\n\t\t\t\tthis._disposer = new MultiDisposer([\n\t\t\t\t\tthis.plusButton.events.on(\"click\", () => {\n\t\t\t\t\t\tchart.zoomIn()\n\t\t\t\t\t}),\n\t\t\t\t\tthis.minusButton.events.on(\"click\", () => {\n\t\t\t\t\t\tchart.zoomOut()\n\t\t\t\t\t})])\n\t\t\t}\n\n\t\t\tif (previous && this._disposer) {\n\t\t\t\tthis._disposer.dispose();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n","import projection from \"./index.js\";\nimport {abs, epsilon} from \"../math.js\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","import * as m from \"./../../dist/es2015/map.js\";\nexport const am5map = m;"],"sourceRoot":""}