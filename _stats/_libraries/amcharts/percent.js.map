{"version":3,"sources":["webpack://@amcharts/amcharts5/./src/.internal/charts/percent/PercentChart.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/percent/PercentSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/pie/PieChart.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/pie/PieSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/funnel/FunnelSlice.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/funnel/FunnelSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/funnel/PyramidSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/funnel/PictorialStackedSeries.ts","webpack://@amcharts/amcharts5/./src/.internal/charts/funnel/SlicedChart.ts","webpack://@amcharts/amcharts5/./tmp/webpack/percent.js"],"names":["_afterNew","this","chartContainer","children","push","seriesContainer","bulletsContainer","SerialChart","PercentChart","className","Container","_root","position","isMeasured","_makeSlices","_makeLabels","_makeTicks","dataItem","slice","slicesContainer","slices","make","on","updateLegendMarker","_setDataItem","set","label","labelsContainer","labels","get","tick","ticksContainer","ticks","fields","colors","reset","_prepareChildren","_lLabels","_rLabels","_hLabels","_valuesDirty","_dataItems","valueWorking","Math","abs","value","percentTotal","setRaw","setPrivateRaw","duration","promises","show","_sequencedShowHide","Promise","all","hide","_updateChildren","text","markDirtyText","_arrangeDown","_arrangeUp","_arrangeLeft","_arrangeRight","processDataItem","next","showDataItem","easing","animation","animate","key","to","waitForStop","hideDataItem","hiddenState","states","create","disposeDataItem","removeValue","dispose","legendDataItem","setting","_getNextDown","sort","a","b","y","l","bounds","adjustedLocalBounds","labelTop","top","bottom","maxHeight","_getNextUp","labelBottom","labelLeft","left","right","maxWidth","labelRight","_updateSize","markDirty","_dataItem","Series","PercentSeries","setAll","x","w","innerWidth","h","innerHeight","startAngle","endAngle","innerRadius","wr","hr","innerBounds","Percent","mr","min","max","prevRadius","_maxRadius","radius","dy","dx","isDirty","series","each","_markDirtyKey","index","indexOf","length","seriesRadius","seriesInnerRadius","classNames","concat","PieChart","List","Template","Slice","themeTags","template","RadialLabel","Tick","makeSlice","_updateTick","events","makeLabel","makeTick","chart","labelsTemplate","markDirtyBounds","getPrivate","updateLegendValue","currentArc","color","_setDefault","middleAngle","labelRadius","isHidden","isHiding","location","labelAngle","cos","sin","pl","pr","PieSeries","display","moveTo","_tlx","_tly","lineTo","_trx","_try","quadraticCurveTo","_cprx","_cpry","_brx","_bry","_blx","_bly","_cplx","_cply","locationX","locationY","tlx","trx","mlx","width","height","tw","bw","_clear","ed","_changed","Graphics","FunnelSlice","_makeLinks","_tag","Label","links","link","onPrivate","markDirtySize","horizontalLayout","verticalLayout","makeLink","_opposite","total","count","dataItems","_total","_count","_fixLayout","_sizeDirty","_nextCoord","setPrivate","decorateSlice","isLast","orientation","centerX","nextValue","nextItem","getNextValue","i","maxSize","workingValue","bottomRatio","valueHigh","d","Infinity","topWidth","bottomWidth","startLocation","endLocation","linkHeight","labelY","labelX","tickLocation","lcw","lch","pt","pb","p0","p1","p2","getPoint","FunnelSeries","_nextSize","undefined","valueIs","sum","sliceHeight","sliceBottomWidth","pyramidHeight","pyramidWidth","linkWidth","center","sliceTopWidth","angle","atan2","c","tan","PI","square","s","sqrt","labelCoord","sliceX","sliceY","linkX","linkY","PyramidSeries","centerY","seriesMask","seriesGraphics","scale","localBounds","mw","mh","NaN","svgPath","_updateScale","PictorialStackedSeries","layout","SlicedChart","am5percent"],"mappings":"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","file":"percent.js","sourcesContent":["import { SerialChart, ISerialChartPrivate, ISerialChartSettings } from \"../../core/render/SerialChart\";\nimport type { PercentSeries } from \"./PercentSeries\";\n\nexport interface IPercentChartSettings extends ISerialChartSettings {\n}\n\nexport interface IPercentChartPrivate extends ISerialChartPrivate {\n}\n\nexport abstract class PercentChart extends SerialChart {\n\tpublic static className: string = \"PercentChart\";\n\tpublic static classNames: Array<string> = SerialChart.classNames.concat([PercentChart.className]);\n\n\tdeclare public _settings: IPercentChartSettings;\n\tdeclare public _privateSettings: IPercentChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.chartContainer.children.push(this.seriesContainer);\n\t\tthis.seriesContainer.children.push(this.bulletsContainer);\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { Graphics } from \"../../core/render/Graphics\";\nimport type { Label } from \"../../core/render/Label\";\nimport type { Tick } from \"../../core/render/Tick\";\nimport type { ListTemplate } from \"../../core/util/List\";\nimport type { ColorSet } from \"../../core/util/ColorSet\";\nimport type { ILegendDataItem } from \"../../core/render/Legend\";\nimport type { Color } from \"../../core/util/Color\";\n\nimport { Series, ISeriesSettings, ISeriesDataItem, ISeriesPrivate } from \"../../core/render/Series\";\nimport { Container } from \"../../core/render/Container\";\nimport { visualSettings } from \"../../core/render/Graphics\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPercentSeriesDataItem extends ISeriesDataItem {\n\n\t/**\n\t * Percent of the series value total.\n\t */\n\tvaluePercentTotal: number;\n\n\t/**\n\t * Category.\n\t */\n\tcategory: string;\n\n\t/**\n\t * Slice visaul element.\n\t */\n\tslice: Graphics;\n\n\t/**\n\t * Slice label.\n\t */\n\tlabel: Label;\n\n\t/**\n\t * Slice tick.\n\t */\n\ttick: Tick;\n\n\t/**\n\t * A related legend data item.\n\t */\n\tlegendDataItem: DataItem<ILegendDataItem>;\n\n\t/**\n\t * Fill color used for the slice and related elements, e.g. legend marker.\n\t */\n\tfill: Color;\n\n}\n\n//type IPercentSeriesDataItemSettings = { [K in keyof IPercentSeriesDataItem]?: string; };\n\nexport interface IPercentSeriesSettings extends ISeriesSettings {\n\n\t/**\n\t * A [[ColorSet]] to use when asigning colors for slices.\n\t */\n\tcolors?: ColorSet;\n\n\t/**\n\t * A field in data that holds category names.\n\t */\n\tcategoryField?: string;\n\n\t/**\n\t * Should slice labelsbe aligned in columns/rows?\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * A field that holds color for slice fill.\n\t */\n\tfillField?: string;\n\n}\n\nexport interface IPercentSeriesPrivate extends ISeriesPrivate {\n\tvalueAverage?: number;\n\tvalueCount?: number;\n\tvalueSum?: number;\n\tvalueAbsoluteSum?: number;\n\tvalueLow?: number;\n\tvalueHigh?: number;\n}\n\n/**\n * A base class for any percent chart series.\n */\nexport abstract class PercentSeries extends Series {\n\tpublic static className: string = \"PercentSeries\";\n\tpublic static classNames: Array<string> = Series.classNames.concat([PercentSeries.className]);\n\n\tdeclare public _settings: IPercentSeriesSettings;\n\tdeclare public _privateSettings: IPercentSeriesPrivate;\n\tdeclare public _dataItemSettings: IPercentSeriesDataItem;\n\n\tdeclare public _sliceType: Graphics;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tpublic readonly slicesContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly labelsContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\tpublic readonly ticksContainer = this.children.push(Container.new(this._root, { position: \"absolute\", isMeasured: false }));\n\n\tprotected _lLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _rLabels: Array<{ label: Label, y: number }> = [];\n\tprotected _hLabels: Array<{ label: Label, y: number }> = [];\n\n\t/**\n\t * A [[ListTemplate]] of all slices in series.\n\t *\n\t * `slices.template` can also be used to configure slices.\n\t */\n\tpublic readonly slices: ListTemplate<this[\"_sliceType\"]> = this._makeSlices();\n\n\tprotected abstract _makeSlices(): ListTemplate<this[\"_sliceType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst slice = this.slicesContainer.children.push(this.slices.make());\n\n\t\tslice.on(\"fill\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice.on(\"stroke\", () => {\n\t\t\tthis.updateLegendMarker(dataItem);\n\t\t})\n\n\t\tslice._setDataItem(dataItem);\n\t\tdataItem.set(\"slice\", slice);\n\t\tthis.slices.push(slice);\n\n\t\treturn slice;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice labels in series.\n\t *\n\t * `labels.template` can also be used to configure slice labels.\n\t */\n\tpublic readonly labels: ListTemplate<this[\"_labelType\"]> = this._makeLabels();\n\n\tprotected abstract _makeLabels(): ListTemplate<this[\"_labelType\"]>;\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLabel(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_labelType\"] {\n\t\tconst label = this.labelsContainer.children.push(this.labels.make());\n\t\tlabel._setDataItem(dataItem);\n\t\tdataItem.set(\"label\", label);\n\t\tthis.labels.push(label);\n\t\treturn label;\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice ticks in series.\n\t *\n\t * `ticks.template` can also be used to configure slice ticks.\n\t */\n\tpublic readonly ticks: ListTemplate<this[\"_tickType\"]> = this._makeTicks();\n\n\tprotected abstract _makeTicks(): ListTemplate<this[\"_tickType\"]>;\n\n\n\tprotected _shouldMakeBullet(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tif (dataItem.get(\"value\") != null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeTick(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_tickType\"] {\n\t\tconst tick = this.ticksContainer.children.push(this.ticks.make());\n\t\ttick._setDataItem(dataItem);\n\t\tdataItem.set(\"tick\", tick);\n\t\tthis.ticks.push(tick);\n\t\treturn tick;\n\t}\n\n\tprotected _afterNew() {\n\t\tthis.fields.push(\"category\", \"fill\");\n\t\tsuper._afterNew();\n\t}\n\n\tprotected _onDataClear() {\n\t\tconst colors = this.get(\"colors\");\n\t\tif (colors) {\n\t\t\tcolors.reset();\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tthis._lLabels = [];\n\t\tthis._rLabels = [];\n\t\tthis._hLabels = [];\n\n\t\tif (this._valuesDirty) {\n\t\t\tlet sum = 0;\n\t\t\tlet absSum = 0;\n\t\t\tlet valueHigh = 0;\n\t\t\tlet valueLow = 0;\n\t\t\tlet count = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet valueWorking = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tsum += valueWorking;\n\t\t\t\tabsSum += Math.abs(valueWorking);\n\t\t\t});\n\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tlet value = dataItem.get(\"valueWorking\", 0);\n\t\t\t\tif (value >= absSum) {\n\t\t\t\t\tsum = dataItem.get(\"value\", 0);\n\t\t\t\t}\n\n\t\t\t\tif (value > valueHigh) {\n\t\t\t\t\tvalueHigh = value;\n\t\t\t\t}\n\n\t\t\t\tif (value < valueLow) {\n\t\t\t\t\tvalueLow = value;\n\t\t\t\t}\n\n\t\t\t\tcount++;\n\n\t\t\t\tlet percentTotal = value / absSum;\n\n\t\t\t\tif (absSum == 0) {\n\t\t\t\t\tpercentTotal = 0;\n\t\t\t\t}\n\n\t\t\t\tdataItem.setRaw(\"valuePercentTotal\", percentTotal * 100);\n\t\t\t});\n\n\t\t\tthis.setPrivateRaw(\"valueLow\", valueLow);\n\t\t\tthis.setPrivateRaw(\"valueHigh\", valueHigh);\n\t\t\tthis.setPrivateRaw(\"valueSum\", sum);\n\t\t\tthis.setPrivateRaw(\"valueAverage\", sum / count);\n\t\t\tthis.setPrivateRaw(\"valueAbsoluteSum\", absSum);\n\t\t}\n\t}\n\n\t/**\n\t * Shows hidden series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async show(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.show(duration))\n\n\t\tpromises.push(this._sequencedShowHide(true, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hide whole series.\n\t *\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Animation promise\n\t */\n\tpublic async hide(duration?: number): Promise<void> {\n\t\tlet promises: Array<Promise<any>> = [];\n\t\tpromises.push(super.hide(duration))\n\n\t\tpromises.push(this._sequencedShowHide(false, duration));\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore \n\t */\n\tpublic _updateChildren() {\n\t\tsuper._updateChildren();\n\t\tif (this._valuesDirty) {\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tdataItem.get(\"label\").text.markDirtyText();\n\t\t\t});\n\t\t}\n\n\t\tthis._arrangeDown(this._lLabels);\n\t\tthis._arrangeUp(this._lLabels);\n\n\t\tthis._arrangeDown(this._rLabels);\n\t\tthis._arrangeUp(this._rLabels);\n\n\t\tthis._arrangeLeft(this._hLabels);\n\t\tthis._arrangeRight(this._hLabels);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tif (dataItem.get(\"fill\") == null) {\n\t\t\tlet colors = this.get(\"colors\");\n\t\t\tif (colors) {\n\t\t\t\tdataItem.setRaw(\"fill\", colors.next());\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.showDataItem(dataItem, duration)];\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = this.get(\"stateAnimationDuration\", 0);\n\t\t}\n\n\t\tconst easing = this.get(\"stateAnimationEasing\");\n\n\t\tlet value = dataItem.get(\"value\");\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: value, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.show(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.show(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.show(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tconst promises = [super.hideDataItem(dataItem, duration)];\n\t\tconst hiddenState = this.states.create(\"hidden\", {})\n\n\t\tif (!$type.isNumber(duration)) {\n\t\t\tduration = hiddenState.get(\"stateAnimationDuration\", this.get(\"stateAnimationDuration\", 0));\n\t\t}\n\n\t\tconst easing = hiddenState.get(\"stateAnimationEasing\", this.get(\"stateAnimationEasing\"));\n\n\t\tconst animation = dataItem.animate({ key: \"valueWorking\", to: 0, duration: duration, easing: easing });\n\t\tif (animation) {\n\t\t\tpromises.push(animation.waitForStop());\n\t\t}\n\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tpromises.push(tick.hide(duration));\n\t\t}\n\t\tconst label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tpromises.push(label.hide(duration));\n\t\t}\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tpromises.push(slice.hide(duration));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet label = dataItem.get(\"label\");\n\t\tif (label) {\n\t\t\tthis.labels.removeValue(label);\n\t\t\tlabel.dispose();\n\t\t}\n\t\tlet tick = dataItem.get(\"tick\");\n\t\tif (tick) {\n\t\t\tthis.ticks.removeValue(tick);\n\t\t\ttick.dispose();\n\t\t}\n\t\tlet slice = dataItem.get(\"slice\");\n\t\tif (slice) {\n\t\t\tthis.slices.removeValue(slice);\n\t\t\tslice.dispose();\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic updateLegendMarker(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst slice = dataItem.get(\"slice\");\n\n\t\tif (slice) {\n\t\t\tconst legendDataItem = dataItem.get(\"legendDataItem\");\n\t\t\tif (legendDataItem) {\n\t\t\t\tconst markerRectangle = legendDataItem.get(\"markerRectangle\");\n\t\t\t\t$array.each(visualSettings, (setting: any) => {\n\t\t\t\t\tmarkerRectangle.set(setting, slice.get(setting));\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _arrangeDown(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = this._getNextDown();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelTop = bounds.top;\n\t\t\t\tif (l.y + labelTop < next) {\n\t\t\t\t\tl.y = next - labelTop;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\n\t\t\t\tnext = l.y + bounds.bottom;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight();\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn 0;\n\t}\n\n\tprotected _arrangeUp(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this._getNextUp();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelBottom = bounds.bottom;\n\t\t\t\tif (l.y + labelBottom > next) {\n\t\t\t\t\tl.y = next - labelBottom;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"y\", l.y);\n\t\t\t\tnext = l.y + bounds.top;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeRight(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\n\t\t\tlet next = 0;\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y > b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y < b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelLeft = bounds.left;\n\t\t\t\tif (l.y + labelLeft < next) {\n\t\t\t\t\tl.y = next - labelLeft;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\n\t\t\t\tnext = l.y + bounds.right;\n\t\t\t})\n\t\t}\n\t}\n\n\tprotected _arrangeLeft(labels?: Array<{ label: Label, y: number }>) {\n\t\tif (labels) {\n\t\t\tlet next = this.labelsContainer.maxWidth();\n\n\t\t\tlabels.sort((a, b) => {\n\t\t\t\tif (a.y < b.y) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\telse if (a.y > b.y) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t})\n\n\t\t\t$array.each(labels, (l) => {\n\t\t\t\tconst bounds = l.label.adjustedLocalBounds();\n\t\t\t\tlet labelRight = bounds.right;\n\t\t\t\tif (l.y + labelRight > next) {\n\t\t\t\t\tl.y = next - labelRight;\n\t\t\t\t}\n\t\t\t\tl.label.set(\"x\", l.y);\n\t\t\t\tnext = l.y + bounds.left;\n\t\t\t})\n\t\t}\n\t}\n\n\tpublic _updateSize() {\n\t\tsuper._updateSize();\n\t\tthis.markDirty();\n\t}\n\n\tprotected _updateTick(_dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\n\t}\n}\n","import type { PieSeries } from \"./PieSeries\";\n\nimport { Percent } from \"../../core/util/Percent\";\nimport { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport { p50 } from \"../../core/util/Percent\";\n\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $math from \"../../core/util/Math\";\n\n\nexport interface IPieChartSettings extends IPercentChartSettings {\n\n\t/**\n\t * Outer radius of the pie chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t * @default 80%\n\t */\n\tradius?: number | Percent;\n\n\t/**\n\t * Inner radius of the pie chart. Setting to any non-zero value will result\n\t * in a donut chart.\n\t *\n\t * Can be set in fixed pixel value, or relative to chart container size in\n\t * percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Pie_radius} for more info\n\t */\n\tinnerRadius?: number | Percent;\n\n\t/**\n\t * A start angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * An end angle of the chart in degrees.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/#Start_end_angles} for more info\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieChartPrivate extends IPercentChartPrivate {\n\n\t/**\n\t * @ignore\n\t */\n\tirModifyer?: number;\n\n}\n\n/**\n * Creates a pie chart.\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieChart extends PercentChart {\n\n\tpublic static className: string = \"PieChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([PieChart.className]);\n\n\tdeclare public _settings: IPieChartSettings;\n\tdeclare public _privateSettings: IPieChartPrivate;\n\tdeclare public _seriesType: PieSeries;\n\n\tprotected _maxRadius: number = 1;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.seriesContainer.setAll({ x: p50, y: p50 });\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\n\t\tconst chartContainer = this.chartContainer;\n\t\tconst w = chartContainer.innerWidth();\n\t\tconst h = chartContainer.innerHeight();\n\n\t\tconst startAngle = this.get(\"startAngle\", 0);\n\t\tconst endAngle = this.get(\"endAngle\", 0);\n\t\tconst innerRadius = this.get(\"innerRadius\");\n\n\n\t\tlet bounds = $math.getArcBounds(0, 0, startAngle, endAngle, 1);\n\n\t\tconst wr = w / (bounds.right - bounds.left);\n\t\tconst hr = h / (bounds.bottom - bounds.top);\n\n\t\tlet innerBounds = { left: 0, right: 0, top: 0, bottom: 0 };\n\n\t\tif (innerRadius instanceof Percent) {\n\t\t\tlet value = innerRadius.value;\n\t\t\tlet mr = Math.min(wr, hr);\n\t\t\tvalue = Math.max(mr * value, mr - Math.min(h, w)) / mr;\n\t\t\tinnerBounds = $math.getArcBounds(0, 0, startAngle, endAngle, value);\n\t\t\tthis.setPrivateRaw(\"irModifyer\", value / innerRadius.value);\n\t\t}\n\n\t\tbounds = $math.mergeBounds([bounds, innerBounds]);\n\n\t\tconst prevRadius = this._maxRadius;\n\t\tthis._maxRadius = Math.min(wr, hr);\n\n\t\tconst radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tthis.seriesContainer.setAll({\n\t\t\tdy: -radius * (bounds.bottom + bounds.top) / 2, dx: -radius * (bounds.right + bounds.left) / 2\n\t\t})\n\n\t\tif (this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\") || prevRadius != this._maxRadius) {\n\t\t\tthis.series.each((series) => {\n\t\t\t\tseries._markDirtyKey(\"startAngle\");\n\t\t\t})\n\t\t}\n\t}\n\n\t/**\n\t * Returns outer radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return outer radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic radius(series?: PieSeries): number {\n\n\t\tlet radius = $utils.relativeToValue(this.get(\"radius\", 0), this._maxRadius);\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesRadius = series.get(\"radius\");\n\t\t\tif (seriesRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * (index + 1);\n\t\t\t}\n\t\t}\n\t\treturn radius;\n\t}\n\n\t/**\n\t * Returns inner radius in pixels.\n\t *\n\t * If optional series parameter is passed in, it will return inner radius\n\t * of that particular series.\n\t *\n\t * @param   series  Series\n\t * @return          Radius in pixels\n\t */\n\tpublic innerRadius(series?: PieSeries): number {\n\t\tconst radius = this.radius();\n\t\tlet innerRadius = $utils.relativeToValue(this.get(\"innerRadius\", 0), radius);\n\n\t\tif (innerRadius < 0) {\n\t\t\tinnerRadius = radius + innerRadius;\n\t\t}\n\n\t\tif (series) {\n\t\t\tlet index = this.series.indexOf(series);\n\t\t\tlet length = this.series.length;\n\n\t\t\tlet seriesInnerRadius = series.get(\"innerRadius\");\n\t\t\tif (seriesInnerRadius != null) {\n\t\t\t\treturn innerRadius + $utils.relativeToValue(seriesInnerRadius, radius - innerRadius);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn innerRadius + (radius - innerRadius) / length * index;\n\t\t\t}\n\t\t}\n\t\treturn innerRadius;\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { PieChart } from \"./PieChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { Slice } from \"../../core/render/Slice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { RadialLabel } from \"../../core/render/RadialLabel\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { p100, Percent } from \"../../core/util/Percent\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $math from \"../../core/util/Math\";\nimport * as $utils from \"../../core/util/Utils\";\n\nexport interface IPieSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: Slice;\n\tlabel: RadialLabel;\n\ttick: Tick;\n}\n\nexport interface IPieSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t */\n\tradius?: Percent | number;\n\n\t/**\n\t * Radius of the series in pixels or percent.\n\t *\n\t * Setting to negative number will mean pixels from outer radius.\n\t */\n\tinnerRadius?: Percent | number;\n\n\t/**\n\t * Start angle of the series in degrees.\n\t *\n\t * @default -90\n\t */\n\tstartAngle?: number;\n\n\t/**\n\t * End angle of the series in degrees.\n\t *\n\t * @default 270\n\t */\n\tendAngle?: number;\n\n}\n\nexport interface IPieSeriesPrivate extends IPercentSeriesPrivate {\n\tradius?:number;\n}\n\n/**\n * Creates a series for a [[PieChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class PieSeries extends PercentSeries {\n\n\tdeclare public chart: PieChart | undefined;\n\n\tpublic static className: string = \"PieSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([PieSeries.className]);\n\n\tdeclare public _settings: IPieSeriesSettings;\n\tdeclare public _privateSettings: IPieSeriesPrivate;\n\tdeclare public _dataItemSettings: IPieSeriesDataItem;\n\n\tdeclare public _sliceType: Slice;\n\tdeclare public _labelType: RadialLabel;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Slice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.slices.template]),\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => RadialLabel._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.labels.template]),\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [\"pie\", \"series\"])\n\t\t\t}, [this.ticks.template]),\n\t\t);\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice.on(\"scale\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.on(\"shiftRadius\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.events.on(\"positionchanged\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\t}\n\n\tprotected _getNextUp() {\n\t\treturn this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tprotected _getNextDown() {\n\t\treturn -this.labelsContainer.maxHeight() / 2;\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tconst chart = this.chart;\n\t\tif (chart) {\n\n\t\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\t\tlet labelsTemplate = this.labels.template;\n\t\t\t\tif (this.get(\"alignLabels\")) {\n\t\t\t\t\tlabelsTemplate.set(\"textType\", \"aligned\");\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (labelsTemplate.get(\"textType\") == null) {\n\t\t\t\t\t\tlabelsTemplate.set(\"textType\", \"adjusted\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\n\t\t\tif (this._valuesDirty || this.isDirty(\"radius\") || this.isDirty(\"innerRadius\") || this.isDirty(\"startAngle\") || this.isDirty(\"endAngle\")) {\n\t\t\t\tthis.markDirtyBounds();\n\t\t\t\tconst startAngle = this.get(\"startAngle\", chart.get(\"startAngle\", -90));\n\t\t\t\tconst endAngle = this.get(\"endAngle\", chart.get(\"endAngle\", 270));\n\t\t\t\tconst arc = endAngle - startAngle;\n\t\t\t\tlet currentAngle = startAngle;\n\n\t\t\t\tconst radius = chart.radius(this);\n\t\t\t\tthis.setPrivateRaw(\"radius\", radius);\n\t\t\t\tlet innerRadius = chart.innerRadius(this) * chart.getPrivate(\"irModifyer\", 1);\n\n\t\t\t\tif (innerRadius < 0) {\n\t\t\t\t\tinnerRadius = radius + innerRadius;\n\t\t\t\t}\n\n\t\t\t\tif (radius > 0) {\n\t\t\t\t\t$array.each(this._dataItems, (dataItem) => {\n\n\t\t\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\t\t\tlet currentArc = arc * dataItem.get(\"valuePercentTotal\") / 100;\n\t\t\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\t\t\tif (slice) {\n\t\t\t\t\t\t\tslice.set(\"radius\", radius);\n\t\t\t\t\t\t\tslice.set(\"innerRadius\", innerRadius);\n\t\t\t\t\t\t\tslice.set(\"startAngle\", currentAngle);\n\n\t\t\t\t\t\t\tslice.set(\"arc\", currentArc);\n\n\t\t\t\t\t\t\tconst color = dataItem.get(\"fill\");\n\t\t\t\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlet middleAngle = $math.normalizeAngle(currentAngle + currentArc / 2);\n\n\t\t\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\t\t\tif (label) {\n\t\t\t\t\t\t\tlabel.set(\"baseRadius\", radius);\n\t\t\t\t\t\t\tlabel.set(\"labelAngle\", middleAngle);\n\n\t\t\t\t\t\t\tif (label.get(\"textType\") == \"aligned\") {\n\t\t\t\t\t\t\t\tlet labelRadius = radius + label.get(\"radius\", 0);\n\t\t\t\t\t\t\t\tlet y = radius * $math.sin(middleAngle);\n\n\t\t\t\t\t\t\t\tif (middleAngle > 90 && middleAngle <= 270) {\n\t\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\t\tthis._lLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabelRadius *= -1;\n\t\t\t\t\t\t\t\t\tlabelRadius -= this.labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\t\t\t\t\t\tlabel.set(\"centerX\", p100);\n\t\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", true);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\t\tif (!label.isHidden() && !label.isHiding()) {\n\t\t\t\t\t\t\t\t\t\tthis._rLabels.push({ label: label, y: y });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tlabelRadius += this.labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\t\t\t\t\t\tlabel.set(\"centerX\", 0);\n\t\t\t\t\t\t\t\t\tlabel.setPrivateRaw(\"left\", false);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlabel.set(\"x\", labelRadius);\n\t\t\t\t\t\t\t\tlabel.set(\"y\", radius * $math.sin(middleAngle));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcurrentAngle += currentArc;\n\t\t\t\t\t\tthis._updateTick(dataItem);\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst tick = dataItem.get(\"tick\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst location = tick.get(\"location\", 1);\n\t\tif (tick && label && slice) {\n\t\t\tconst radius = (slice.get(\"shiftRadius\", 0) + slice.get(\"radius\", 0)) * slice.get(\"scale\", 1) * location;\n\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\tconst cos = $math.cos(labelAngle);\n\t\t\tconst sin = $math.sin(labelAngle);\n\n\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\n\t\t\tlet x = 0;\n\t\t\tlet y = 0;\n\n\t\t\tx = label.x();\n\t\t\ty = label.y();\n\n\t\t\tif (label.get(\"textType\") == \"circular\") {\n\t\t\t\tconst labelRadius = label.get(\"radius\", 0) + label.get(\"baseRadius\", 0) - label.get(\"paddingBottom\", 0);\n\t\t\t\tconst labelAngle = label.get(\"labelAngle\", 0);\n\t\t\t\tx = labelRadius * $math.cos(labelAngle);\n\t\t\t\ty = labelRadius * $math.sin(labelAngle);\n\t\t\t}\n\n\t\t\tlet dx = -pr;\n\t\t\tif (label.getPrivate(\"left\")) {\n\t\t\t\tdx = pl;\n\t\t\t}\n\n\t\t\ttick.set(\"points\", [{ x: slice.x() + radius * cos, y: slice.y() + radius * sin }, { x: x + dx, y: y }, { x: x, y: y }]);\n\t\t}\n\t}\n}\n","import { Graphics, IGraphicsSettings, IGraphicsPrivate } from \"../../core/render/Graphics\";\nimport type { IPoint } from \"../../core/util/IPoint\";\n\nexport interface IMapLineSettings extends IGraphicsSettings {\n\n\t/**\n\t * Top width in pixels.\n\t */\n\ttopWidth?: number;\n\n\t/**\n\t * Bottom width in pixels.\n\t */\n\tbottomWidth?: number;\n\n\t/**\n\t * Orientation.\n\t */\n\torientation?: \"vertical\" | \"horizontal\";\n\n\t/**\n\t * A distance in pixels the slice should \"puff up\".\n\t *\n\t * Any non-zero value will make sides of the slide curved.\n\t */\n\texpandDistance?: number;\n\n}\n\nexport interface IMapLinePrivate extends IGraphicsPrivate {\n}\n\n/**\n * Draws a slice for [[FunnelSeries]].\n */\nexport class FunnelSlice extends Graphics {\n\tdeclare public _settings: IMapLineSettings;\n\tdeclare public _privateSettings: IMapLinePrivate;\n\n\tpublic static className: string = \"FunnelSlice\";\n\tpublic static classNames: Array<string> = Graphics.classNames.concat([FunnelSlice.className]);\n\tprotected _projectionDirty: boolean = false;\n\n\tprotected _tlx: number = 0;\n\tprotected _tly: number = 0;\n\n\tprotected _trx: number = 0;\n\tprotected _try: number = 0;\n\n\tprotected _blx: number = 0;\n\tprotected _bly: number = 0;\n\n\tprotected _brx: number = 0;\n\tprotected _bry: number = 0;\n\n\tprotected _cprx: number = 0;\n\tprotected _cplx: number = 0;\n\tprotected _cpry: number = 0;\n\tprotected _cply: number = 0;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"draw\", (display) => {\n\t\t\tdisplay.moveTo(this._tlx, this._tly);\n\t\t\tdisplay.lineTo(this._trx, this._try);\n\t\t\tdisplay.quadraticCurveTo(this._cprx, this._cpry, this._brx, this._bry);\n\t\t\tdisplay.lineTo(this._blx, this._bly);\n\t\t\tdisplay.quadraticCurveTo(this._cplx, this._cply, this._tlx, this._tly);\n\t\t})\n\t}\n\n\tpublic getPoint(locationX: number, locationY: number): IPoint {\n\t\tlet w = this.width();\n\t\tlet h = this.height();\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", 0);\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationY;\n\t\t\tlet mrx = trx + (brx - trx) * locationY;\n\n\t\t\treturn { x: mlx + (mrx - mlx) * locationX, y: h * locationY };\n\t\t}\n\t\telse {\n\t\t\tlet tlx = -tw / 2;\n\t\t\tlet trx = tw / 2;\n\n\t\t\tlet brx = bw / 2;\n\t\t\tlet blx = - bw / 2;\n\n\t\t\tlet mlx = tlx + (blx - tlx) * locationX;\n\t\t\tlet mrx = trx + (brx - trx) * locationX;\n\n\t\t\treturn { x: w * locationX, y: mlx + (mrx - mlx) * locationY};\n\t\t}\n\n\t}\n\n\tpublic _changed() {\n\n\t\tif (this.isDirty(\"topWidth\") || this.isDirty(\"bottomWidth\") || this.isDirty(\"expandDistance\") || this.isDirty(\"orientation\") || this.isDirty(\"width\") || this.isDirty(\"height\")) {\n\t\t\tconst w = this.width();\n\t\t\tconst h = this.height();\n\t\t\tconst tw = this.get(\"topWidth\", 0);\n\t\t\tconst bw = this.get(\"bottomWidth\", 0);\n\t\t\tthis._clear = true;\n\n\t\t\tlet ed = this.get(\"expandDistance\", 0);\n\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\tthis._tlx = -tw / 2;\n\t\t\t\tthis._tly = 0;\n\n\t\t\t\tthis._trx = tw / 2;\n\t\t\t\tthis._try = 0;\n\n\t\t\t\tthis._brx = bw / 2;\n\t\t\t\tthis._bry = h;\n\n\t\t\t\tthis._blx = -bw / 2;\n\t\t\t\tthis._bly = h;\n\n\t\t\t\tthis._cprx = this._trx + (this._brx - this._trx) / 2 + ed * h,\n\t\t\t\tthis._cpry = this._try + 0.5 * h;\n\n\t\t\t\tthis._cplx = this._tlx + (this._blx - this._tlx) / 2 - ed * h;\n\t\t\t\tthis._cply = this._tly + 0.5 * h;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis._tly = -tw / 2;\n\t\t\t\tthis._tlx = 0;\n\n\t\t\t\tthis._try = tw / 2;\n\t\t\t\tthis._trx = 0;\n\n\t\t\t\tthis._bry = bw / 2;\n\t\t\t\tthis._brx = w;\n\n\t\t\t\tthis._bly = -bw / 2;\n\t\t\t\tthis._blx = w;\n\n\t\t\t\tthis._cpry = this._try + (this._bry - this._try) / 2 + ed * w,\n\t\t\t\tthis._cprx = this._trx + 0.5 * w;\n\n\t\t\t\tthis._cply = this._tly + (this._bly - this._tly) / 2 - ed * w;\n\t\t\t\tthis._cplx = this._tlx + 0.5 * w;\n\t\t\t}\n\t\t}\n\t\tsuper._changed();\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport type { SlicedChart } from \"./SlicedChart\";\n\nimport { PercentSeries, IPercentSeriesSettings, IPercentSeriesDataItem, IPercentSeriesPrivate } from \"../percent/PercentSeries\";\nimport { Template } from \"../../core/util/Template\";\nimport { ListTemplate } from \"../../core/util/List\";\nimport { FunnelSlice } from \"./FunnelSlice\";\nimport { Tick } from \"../../core/render/Tick\";\nimport { Label } from \"../../core/render/Label\";\nimport { percent, p50, p100 } from \"../../core/util/Percent\";\n\nimport * as $array from \"../../core/util/Array\";\nimport * as $type from \"../../core/util/Type\";\nimport * as $utils from \"../../core/util/Utils\";\n\n\nexport interface IFunnelSeriesDataItem extends IPercentSeriesDataItem {\n\tslice: FunnelSlice;\n\tlink: FunnelSlice;\n\tindex: number;\n}\n\nexport interface IFunnelSeriesSettings extends IPercentSeriesSettings {\n\n\t/**\n\t * Width of the bottom edge of the slice relative to the top edge of the next\n\t * slice.\n\t *\n\t * `1` - means the full width of the slice, resulting in a rectangle.\n\t * `0` - means using width of the next slice, resulting in a trapezoid.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_bottom_width} for more info\n\t * @default 1\n\t */\n\tbottomRatio?: number;\n\n\t/**\n\t * Orientation of the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/#Series_orientation} for more info\n\t * @default \"vertical\"\n\t */\n\torientation: \"horizontal\" | \"vertical\";\n\n\t/**\n\t * If set to `true`, series will not create slices for data items with zero\n\t * value.\n\t */\n\tignoreZeroValues?: boolean;\n\n\t/**\n\t * Should labels be aligned into columns/rows?\n\t *\n\t * @default false\n\t */\n\talignLabels?: boolean;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tstartLocation?: number;\n\n\t/**\n\t * Relative location within area available to series where it should start.\n\t *\n\t * `0` - beginning, `1` - end, or any intermediate value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Start_end_locations} for more info\n\t * @default 0\n\t */\n\tendLocation?: number;\n\n}\n\nexport interface IFunnelSeriesPrivate extends IPercentSeriesPrivate {\n}\n\n/**\n * Creates a funnel series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/} for more info\n * @important\n */\nexport class FunnelSeries extends PercentSeries {\n\n\t/**\n\t * A chart series is attached to.\n\t */\n\tdeclare public chart: SlicedChart | undefined;\n\n\tprotected _tag = \"funnel\";\n\n\tdeclare public _sliceType: FunnelSlice;\n\tdeclare public _labelType: Label;\n\tdeclare public _tickType: Tick;\n\n\tprotected _makeSlices(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.slices.template.get(\"themeTags\", []), [this._tag, \"series\", \"slice\", this.get(\"orientation\")])\n\t\t\t}, [this.slices.template])\n\t\t);\n\t}\n\n\tprotected _makeLabels(): ListTemplate<this[\"_labelType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Label._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.labels.template.get(\"themeTags\", []), [this._tag, \"series\", \"label\", this.get(\"orientation\")])\n\t\t\t}, [this.labels.template])\n\t\t);\n\t}\n\n\tprotected _makeTicks(): ListTemplate<this[\"_tickType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => Tick._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.ticks.template.get(\"themeTags\", []), [this._tag, \"series\", \"tick\", this.get(\"orientation\")])\n\t\t\t}, [this.ticks.template])\n\t\t);\n\t}\n\n\t/**\n\t * A [[ListTemplate]] of all slice links in series.\n\t *\n\t * `links.template` can also be used to configure slice links.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/funnel-series/#Slice_links} for more info\n\t */\n\tpublic readonly links: ListTemplate<this[\"_sliceType\"]> = this._makeLinks();\n\n\tprotected _makeLinks(): ListTemplate<this[\"_sliceType\"]> {\n\t\treturn new ListTemplate(\n\t\t\tTemplate.new({}),\n\t\t\t() => FunnelSlice._new(this._root, {\n\t\t\t\tthemeTags: $utils.mergeTags(this.links.template.get(\"themeTags\", []), [this._tag, \"series\", \"link\", this.get(\"orientation\")])\n\t\t\t}, [this.links.template]),\n\t\t);\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic makeLink(dataItem: DataItem<this[\"_dataItemSettings\"]>): this[\"_sliceType\"] {\n\t\tconst link = this.slicesContainer.children.push(this.links.make());\n\t\tlink._setDataItem(dataItem);\n\t\tdataItem.set(\"link\", link);\n\t\tthis.links.push(link);\n\t\treturn link;\n\t}\n\n\tpublic static className: string = \"FunnelSeries\";\n\tpublic static classNames: Array<string> = PercentSeries.classNames.concat([FunnelSeries.className]);\n\n\tdeclare public _settings: IFunnelSeriesSettings;\n\tdeclare public _privateSettings: IFunnelSeriesPrivate;\n\tdeclare public _dataItemSettings: IFunnelSeriesDataItem;\n\n\tprotected _total: number = 0;\n\tprotected _count: number = 0;\n\tprotected _nextCoord: number = 0;\n\n\tprotected _opposite: boolean = false;\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tconst slicesContainer = this.slicesContainer;\n\t\tslicesContainer.setAll({ isMeasured: true, position: \"relative\", width: percent(100), height: percent(100) });\n\t\tslicesContainer.onPrivate(\"width\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tslicesContainer.onPrivate(\"height\", () => {\n\t\t\tthis.markDirtySize();\n\t\t})\n\n\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t}\n\t\telse {\n\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t}\n\t}\n\n\tprotected processDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.processDataItem(dataItem);\n\n\t\tconst slice = this.makeSlice(dataItem);\n\n\t\tslice._setDataItem(dataItem);\n\n\t\tdataItem.set(\"slice\", slice);\n\n\t\tthis.makeLink(dataItem);\n\t\tconst label = this.makeLabel(dataItem);\n\n\t\tlabel.on(\"x\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tlabel.on(\"y\", () => {\n\t\t\tthis._updateTick(dataItem);\n\t\t})\n\n\t\tthis.makeTick(dataItem);\n\n\t\tslice.events.on(\"positionchanged\", () => {\n\t\t\tlabel.markDirty();\n\t\t})\n\n\t\tslice.events.on(\"boundschanged\", () => {\n\t\t\tconst dataItem = slice.dataItem;\n\t\t\tif (dataItem) {\n\t\t\t\tthis._updateTick(dataItem as any);\n\t\t\t}\n\t\t})\n\t}\n\n\n\tpublic _updateChildren() {\n\t\tthis._opposite = false;\n\t\tif (this.children.indexOf(this.labelsContainer) == 0) {\n\t\t\tthis._opposite = true;\n\t\t}\n\n\t\tlet total = 0;\n\t\tlet count = 0;\n\n\t\t$array.each(this.dataItems, (dataItem) => {\n\t\t\tconst value = dataItem.get(\"value\");\n\t\t\tif ($type.isNumber(value)) {\n\t\t\t\tcount++;\n\t\t\t\tif (value > 0) {\n\t\t\t\t\ttotal += Math.abs(dataItem.get(\"valueWorking\", value) / value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (this.get(\"ignoreZeroValues\", false)) {\n\t\t\t\t\t\tcount--;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (dataItem.isHidden()) {\n\t\t\t\t\t\t\tcount--;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttotal += 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\n\t\tthis._total = 1 / count * total;\n\t\tthis._count = count;\n\n\t\tif (this.isDirty(\"alignLabels\")) {\n\t\t\tthis._fixLayout();\n\t\t}\n\n\t\tif (this._total > 0 && (this._valuesDirty || this._sizeDirty)) {\n\n\t\t\tconst slicesContainer = this.slicesContainer;\n\n\t\t\tlet h: number;\n\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\th = slicesContainer.innerHeight();\n\t\t\t}\n\t\t\telse {\n\t\t\t\th = slicesContainer.innerWidth();\n\t\t\t}\n\n\t\t\tthis._nextCoord = this.get(\"startLocation\", 0) * h;\n\n\t\t\tthis.markDirtyBounds();\n\n\t\t\tlet i = 0;\n\t\t\t$array.each(this._dataItems, (dataItem) => {\n\t\t\t\tthis.updateLegendValue(dataItem);\n\n\t\t\t\tdataItem.set(\"index\", i);\n\t\t\t\ti++;\n\n\t\t\t\tconst slice = dataItem.get(\"slice\");\n\t\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\t\tconst label = dataItem.get(\"label\");\n\t\t\t\tconst link = dataItem.get(\"link\");\n\t\t\t\tconst color = dataItem.get(\"fill\");\n\n\t\t\t\tslice._setDefault(\"fill\", color);\n\t\t\t\tslice._setDefault(\"stroke\", color);\n\t\t\t\tlink._setDefault(\"fill\", color);\n\t\t\t\tlink._setDefault(\"stroke\", color);\n\n\t\t\t\tconst value = dataItem.get(\"value\");\n\t\t\t\tif ($type.isNumber(value)) {\n\t\t\t\t\tif (value == 0 && this.get(\"ignoreZeroValues\")) {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", false);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", false);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", false);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tslice.setPrivate(\"visible\", true);\n\t\t\t\t\t\ttick.setPrivate(\"visible\", true);\n\t\t\t\t\t\tlabel.setPrivate(\"visible\", true);\n\n\t\t\t\t\t\tthis.decorateSlice(dataItem);\n\n\t\t\t\t\t\tif (this.isLast(dataItem)) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", false);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (!dataItem.isHidden()) {\n\t\t\t\t\t\t\tlink.setPrivate(\"visible\", true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t\tsuper._updateChildren();\n\t}\n\n\tprotected _fixLayout() {\n\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst labelsContainer = this.labelsContainer;\n\t\tconst labelsTemplate = this.labels.template;\n\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tlabelsContainer.set(\"position\", \"relative\");\n\t\t\tlabelsContainer.setAll({ isMeasured: true });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tthis.set(\"layout\", this._root.horizontalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: p100, x: p100 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.set(\"layout\", this._root.verticalLayout);\n\t\t\t\tlabelsTemplate.setAll({ centerX: 0, x: 0 });\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tlabelsContainer.setAll({ isMeasured: false, position: \"absolute\" });\n\t\t\tif (orientation == \"vertical\") {\n\t\t\t\tlabelsContainer.setAll({ x: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, x: 0 });\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlabelsContainer.setAll({ y: p50 });\n\t\t\t\tlabelsTemplate.setAll({ centerX: p50, y: 0 });\n\t\t\t}\n\t\t}\n\t\tthis.markDirtySize();\n\t}\n\n\tprotected getNextValue(dataItem: DataItem<this[\"_dataItemSettings\"]>): number {\n\t\tlet index = dataItem.get(\"index\");\n\t\tlet nextValue = dataItem.get(\"valueWorking\", 0);\n\t\tif (index < this.dataItems.length - 1) {\n\t\t\tlet nextItem = this.dataItems[index + 1];\n\t\t\tnextValue = nextItem.get(\"valueWorking\", 0);\n\n\t\t\tif (nextItem.isHidden() || (nextItem.get(\"value\") == 0 && this.get(\"ignoreZeroValues\"))) {\n\t\t\t\treturn this.getNextValue(nextItem);\n\t\t\t}\n\t\t}\n\t\treturn nextValue;\n\t}\n\n\tprotected isLast(dataItem: DataItem<this[\"_dataItemSettings\"]>): boolean {\n\t\tlet index = dataItem.get(\"index\");\n\t\tif (index == this.dataItems.length - 1) {\n\t\t\treturn true;\n\t\t}\n\t\telse {\n\t\t\tfor (let i = index + 1; i < this.dataItems.length; i++) {\n\t\t\t\tif (!this.dataItems[i].isHidden()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tlet maxWidth = slicesContainer.innerWidth();\n\t\tlet maxHeight = slicesContainer.innerHeight();\n\n\t\tlet maxSize = maxWidth;\n\t\tif (orientation == \"horizontal\") {\n\t\t\tmaxSize = maxHeight;\n\t\t}\n\n\t\tconst nextValue = this.getNextValue(dataItem);\n\t\tconst value = dataItem.get(\"value\", 0);\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", value));\n\t\tconst bottomRatio = this.get(\"bottomRatio\", 0);\n\t\tconst valueHigh = this.getPrivate(\"valueHigh\", 0);\n\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tif (this._nextCoord == Infinity) {\n\t\t\tthis._nextCoord = 0;\n\t\t}\n\n\t\tlet topWidth = workingValue / valueHigh * maxSize;\n\t\tlet bottomWidth = (workingValue - (workingValue - nextValue) * bottomRatio) / valueHigh * maxSize;\n\n\t\tslice.setAll({ topWidth, bottomWidth, orientation });\n\t\tlink.setAll({ topWidth: bottomWidth, bottomWidth: (workingValue - (workingValue - nextValue)) / valueHigh * maxSize, orientation });\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tif (orientation == \"vertical\") {\n\n\t\t\tlet linkHeight = link.height() * d;\n\n\t\t\tmaxHeight = maxHeight * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"y\", this._nextCoord);\n\n\t\t\tlet height = Math.min(100000, Math.max(0, maxHeight / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ height, x: maxWidth / 2 });\n\t\t\tlet labelY = this._nextCoord + height / 2;\n\t\t\tlabel.set(\"y\", labelY);\n\n\t\t\tthis._nextCoord += height + linkHeight;\n\t\t\tlink.setAll({ y: this._nextCoord - linkHeight, x: maxWidth / 2 });\n\t\t}\n\t\telse {\n\t\t\tlet linkHeight = link.width() * d;\n\n\t\t\tmaxWidth = maxWidth * (endLocation - startLocation) + linkHeight;\n\n\t\t\tslice.set(\"x\", this._nextCoord);\n\n\t\t\tlet width = Math.min(100000, Math.max(0, maxWidth / this._count * d / this._total - linkHeight));\n\n\t\t\tslice.setAll({ width, y: maxHeight / 2 });\n\t\t\tconst labelX = this._nextCoord + width / 2;\n\t\t\tlabel.set(\"x\", labelX);\n\n\t\t\tthis._nextCoord += width + linkHeight;\n\t\t\tlink.setAll({ x: this._nextCoord - linkHeight, y: maxHeight / 2 });\n\t\t}\n\t}\n\n\t/**\n\t * Hides series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async hideDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").hide(duration);\n\t\treturn super.hideDataItem(dataItem, duration)\n\t}\n\n\t/**\n\t * Shows series's data item.\n\t *\n\t * @param   dataItem  Data item\n\t * @param   duration  Animation duration in milliseconds\n\t * @return            Promise\n\t */\n\tpublic async showDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>, duration?: number): Promise<void> {\n\t\tdataItem.get(\"link\").show(duration);\n\t\treturn super.showDataItem(dataItem, duration)\n\t}\n\n\tprotected _updateTick(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tif (this.get(\"alignLabels\")) {\n\t\t\tconst tick = dataItem.get(\"tick\");\n\t\t\tconst label = dataItem.get(\"label\");\n\t\t\tconst slice = dataItem.get(\"slice\");\n\n\t\t\tif (tick && slice && label) {\n\n\t\t\t\tconst labelsContainer = this.labelsContainer;\n\t\t\t\tconst slicesContainer = this.slicesContainer;\n\t\t\t\tlet tickLocation = tick.get(\"location\", 0.5);\n\n\t\t\t\tconst lcw = labelsContainer.width();\n\t\t\t\tconst lch = labelsContainer.height();\n\n\t\t\t\tconst pl = labelsContainer.get(\"paddingLeft\", 0);\n\t\t\t\tconst pr = labelsContainer.get(\"paddingRight\", 0);\n\t\t\t\tconst pt = labelsContainer.get(\"paddingTop\", 0);\n\t\t\t\tconst pb = labelsContainer.get(\"paddingBottom\", 0);\n\n\t\t\t\tlet p0 = { x: 0, y: 0 };\n\t\t\t\tlet p1 = { x: 0, y: 0 };\n\t\t\t\tlet p2 = { x: 0, y: 0 };\n\n\t\t\t\tif (this._opposite) {\n\t\t\t\t\ttickLocation = 1 - tickLocation;\n\t\t\t\t}\n\n\t\t\t\tif (this.get(\"orientation\") == \"vertical\") {\n\t\t\t\t\tp0 = slice.getPoint(tickLocation, 0.5);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.x = lcw;\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = lcw - pl;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.x = slicesContainer.x() + slicesContainer.width();\n\t\t\t\t\t\tp1.y = label.y();\n\n\t\t\t\t\t\tp2.x = p1.x + lcw - label.width() - pr;\n\t\t\t\t\t\tp2.y = p1.y;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tp0 = slice.getPoint(0.5, tickLocation);\n\t\t\t\t\tp0.x += slice.x() + slicesContainer.x();\n\t\t\t\t\tp0.y += slice.y() + slicesContainer.y();\n\n\t\t\t\t\tif (this._opposite) {\n\t\t\t\t\t\tp1.y = lch;\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = lch - pt;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp1.y = slicesContainer.y() + slicesContainer.height();\n\t\t\t\t\t\tp1.x = label.x();\n\n\t\t\t\t\t\tp2.y = p1.y + lch - label.height() - pb;\n\t\t\t\t\t\tp2.x = p1.x;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttick.set(\"points\", [p0, p1, p2]);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @ignore\n\t */\n\tpublic disposeDataItem(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tsuper.disposeDataItem(dataItem);\n\t\tlet link = dataItem.get(\"link\");\n\t\tif (link) {\n\t\t\tthis.links.removeValue(link);\n\t\t\tlink.dispose();\n\t\t}\n\t}\n}\n","import type { DataItem } from \"../../core/render/Component\";\nimport { FunnelSeries, IFunnelSeriesSettings, IFunnelSeriesDataItem, IFunnelSeriesPrivate } from \"./FunnelSeries\";\nimport { Percent, p100 } from \"../../core/util/Percent\";\nimport * as $utils from \"../../core/util/Utils\";\nimport * as $type from \"../../core/util/Type\";\n\nexport interface IPyramidSeriesDataItem extends IFunnelSeriesDataItem {\n\n}\n\nexport interface IPyramidSeriesSettings extends IFunnelSeriesSettings {\n\n\t/**\n\t * The width of the tip of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\ttopWidth?: number | Percent;\n\n\t/**\n\t * The width of the base of the pyramid.\n\t *\n\t * Can either be a fixed pixel value or percent relative to the space\n\t * available to the series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Tip_and_base} for more info\n\t * @default 0\n\t */\n\tbottomWidth?: number | Percent;\n\n\t/**\n\t * Determines calculation mechanism for the slice area based on value.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/#Slice_size} for more info\n\t * @default \"area\"\n\t */\n\tvalueIs?: \"area\" | \"height\";\n\n}\n\nexport interface IPyramidSeriesPrivate extends IFunnelSeriesPrivate {\n}\n\n/**\n * Creates a pyramid series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pyramid-series/} for more info\n * @important\n */\nexport class PyramidSeries extends FunnelSeries {\n\tprotected _tag = \"pyramid\";\n\n\tpublic static className: string = \"PyramidSeries\";\n\tpublic static classNames: Array<string> = FunnelSeries.classNames.concat([PyramidSeries.className]);\n\n\tdeclare public _settings: IPyramidSeriesSettings;\n\tdeclare public _privateSettings: IPyramidSeriesPrivate;\n\tdeclare public _dataItemSettings: IPyramidSeriesDataItem;\n\n\tprotected _nextSize: number | undefined;\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tthis._nextSize = undefined;\n\t}\n\n\tprotected decorateSlice(dataItem: DataItem<this[\"_dataItemSettings\"]>) {\n\t\tconst orientation = this.get(\"orientation\");\n\t\tconst slicesContainer = this.slicesContainer;\n\n\t\tconst slice = dataItem.get(\"slice\");\n\t\tconst label = dataItem.get(\"label\");\n\t\tconst link = dataItem.get(\"link\");\n\t\tconst valueIs = this.get(\"valueIs\", \"area\");\n\n\t\tconst sum = this.getPrivate(\"valueAbsoluteSum\", 0);\n\n\t\tif (sum == 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst startLocation = this.get(\"startLocation\", 0);\n\t\tconst endLocation = this.get(\"endLocation\", 1);\n\n\t\tconst tw = this.get(\"topWidth\", 0);\n\t\tconst bw = this.get(\"bottomWidth\", p100);\n\n\t\tconst workingValue = Math.abs(dataItem.get(\"valueWorking\", 0));\n\t\tconst value = dataItem.get(\"value\", 0);\n\n\t\tlet sliceHeight: number;\n\t\tlet sliceBottomWidth: number;\n\n\t\tlet pyramidHeight = slicesContainer.innerHeight();\n\t\tlet pyramidWidth = slicesContainer.innerWidth();\n\t\tlet linkWidth = link.width();\n\t\tlet linkHeight = link.height();\n\n\t\tif (orientation == \"horizontal\") {\n\t\t\t[pyramidWidth, pyramidHeight] = [pyramidHeight, pyramidWidth];\n\t\t\t[linkWidth, linkHeight] = [linkHeight, linkWidth];\n\t\t}\n\n\t\tconst center = pyramidWidth / 2;\n\n\t\tlet d = 1;\n\t\tif (value != 0) {\n\t\t\td = workingValue / Math.abs(value);\n\t\t}\n\t\telse {\n\t\t\tif (dataItem.isHidden()) {\n\t\t\t\td = 0.000001;\n\t\t\t}\n\t\t}\n\n\t\tlinkHeight *= d;\n\n\t\tpyramidHeight = pyramidHeight * (endLocation - startLocation) - linkHeight * (this._count * this._total - 1);\n\n\t\tlet topWidth = $utils.relativeToValue(tw, pyramidWidth);\n\n\t\tif (!$type.isNumber(this._nextSize)) {\n\t\t\tthis._nextSize = topWidth;\n\t\t}\n\n\t\tlet bottomWidth = $utils.relativeToValue(bw, pyramidWidth);\n\t\tlet sliceTopWidth = this._nextSize;\n\n\t\tlet angle = Math.atan2(pyramidHeight, topWidth - bottomWidth);\n\t\tlet c = Math.tan(Math.PI / 2 - angle);\n\t\tif (c == 0) {\n\t\t\tc = 0.00000001;\n\t\t}\n\n\t\tif (valueIs == \"area\") {\n\t\t\tlet totalSquare = (topWidth + bottomWidth) / 2 * pyramidHeight;\n\t\t\tlet square = totalSquare * workingValue / sum;\n\n\t\t\tlet s = Math.abs(sliceTopWidth * sliceTopWidth - 2 * square * c);\n\n\t\t\tsliceHeight = (sliceTopWidth - Math.sqrt(s)) / c;\n\n\t\t\tif (sliceHeight > 0) {\n\t\t\t\tsliceBottomWidth = (2 * square - sliceHeight * sliceTopWidth) / sliceHeight;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsliceBottomWidth = sliceTopWidth;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tsliceHeight = pyramidHeight * workingValue / sum;\n\t\t\tsliceBottomWidth = sliceTopWidth - sliceHeight * c;\n\t\t}\n\n\t\tlet labelCoord = this._nextCoord + sliceHeight / 2;\n\t\tlet sliceX = center;\n\t\tlet sliceY = this._nextCoord;\n\n\t\tlet linkX = center;\n\t\tlet linkY = sliceY + sliceHeight;\n\n\t\tif (orientation == \"vertical\") {\n\t\t\tlabel.set(\"y\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._rLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\tslice.set(\"height\", sliceHeight);\n\t\t}\n\t\telse {\n\t\t\tlabel.set(\"x\", labelCoord);\n\t\t\tif (label.get(\"opacity\") > 0) {\n\t\t\t\tthis._hLabels.push({ label: label, y: labelCoord });\n\t\t\t}\n\t\t\t[sliceX, sliceY] = [sliceY, sliceX];\n\t\t\t[linkX, linkY] = [linkY, linkX];\n\n\t\t\tslice.set(\"width\", sliceHeight);\n\t\t}\n\n\t\tslice.setAll({ orientation, bottomWidth: sliceBottomWidth, topWidth: sliceTopWidth, x: sliceX, y: sliceY });\n\t\tlink.setAll({ orientation, x: linkX, y: linkY, topWidth: sliceBottomWidth, bottomWidth: sliceBottomWidth });\n\n\t\tthis._nextSize = sliceBottomWidth;\n\t\tthis._nextCoord += sliceHeight + linkHeight;\n\t}\n}\n","import { PyramidSeries, IPyramidSeriesSettings, IPyramidSeriesDataItem, IPyramidSeriesPrivate } from \"./PyramidSeries\";\nimport { Graphics } from \"../../core/render/Graphics\";\nimport { p100, p50 } from \"../../core/util/Percent\"\n\n\nexport interface IPictorialStackedSeriesDataItem extends IPyramidSeriesDataItem {\n\n}\n\nexport interface IPictorialStackedSeriesSettings extends IPyramidSeriesSettings {\n\n\t/**\n\t * An SVG path that will define the shape of the pictorial series.\n\t *\n\t * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/#Shape_of_the_series} for more info\n\t */\n\tsvgPath?: string;\n\n}\n\nexport interface IPictorialStackedSeriesPrivate extends IPyramidSeriesPrivate {\n}\n\n/**\n * Creates a pictorial series for use in a [[SlicedChart]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/sliced-chart/pictorial-stacked-series/} for more info\n * @important\n */\nexport class PictorialStackedSeries extends PyramidSeries {\n\tprotected _tag = \"pictorial\";\n\n\tpublic static className: string = \"PictorialStackedSeries\";\n\tpublic static classNames: Array<string> = PyramidSeries.classNames.concat([PictorialStackedSeries.className]);\n\n\tdeclare public _settings: IPictorialStackedSeriesSettings;\n\tdeclare public _privateSettings: IPictorialStackedSeriesPrivate;\n\tdeclare public _dataItemSettings: IPictorialStackedSeriesDataItem;\n\n\t/**\n\t * A [[Graphics]] element to used as a mask (shape) for the series.\n\t *\n\t * This element is read-only. To modify the mask/shape, use the `svgPath` setting.\n\t */\n\tpublic readonly seriesMask: Graphics = Graphics.new(this._root, { position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 });\n\n\tpublic readonly seriesGraphics: Graphics = this.slicesContainer.children.push(Graphics.new(this._root, { themeTags: [\"pictorial\", \"background\"], position: \"absolute\", x: p50, y: p50, centerX: p50, centerY: p50 }));\n\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\t\tthis.set(\"topWidth\", p100);\n\t\tthis.set(\"bottomWidth\", p100);\n\t\tthis.set(\"valueIs\", \"height\");\n\t\tthis.slicesContainer.set(\"mask\", this.seriesMask);\n\t}\n\n\tprotected _updateScale() {\n\t\tlet slicesContainer = this.slicesContainer;\n\n\t\tlet w = slicesContainer.innerWidth();\n\t\tlet h = slicesContainer.innerHeight();\n\n\t\tlet seriesMask = this.seriesMask;\n\t\tlet seriesGraphics = this.seriesGraphics;\n\t\tlet scale = seriesMask.get(\"scale\", 1);\n\n\t\tconst bounds = seriesMask.localBounds();\n\n\t\tlet mw = bounds.right - bounds.left;\n\t\tlet mh = bounds.bottom - bounds.top;\n\t\tif (this.get(\"orientation\") == \"horizontal\") {\n\t\t\tscale = w / mw;\n\t\t}\n\t\telse {\n\t\t\tscale = h / mh;\n\t\t}\n\t\tif (scale != Infinity && scale != NaN) {\n\t\t\tseriesMask.set(\"scale\", scale);\n\t\t\tseriesMask.set(\"x\", w / 2);\n\t\t\tseriesMask.set(\"y\", h / 2);\n\n\t\t\tseriesGraphics.set(\"scale\", scale);\n\t\t\tseriesGraphics.set(\"x\", w / 2);\n\t\t\tseriesGraphics.set(\"y\", h / 2);\n\t\t}\n\t}\n\n\tpublic _prepareChildren() {\n\t\tsuper._prepareChildren();\n\t\tif (this.isDirty(\"svgPath\")) {\n\t\t\tconst svgPath = this.get(\"svgPath\");\n\t\t\tthis.seriesMask.set(\"svgPath\", svgPath);\n\t\t\tthis.seriesGraphics.set(\"svgPath\", svgPath);\n\t\t}\n\n\t\tthis._updateScale();\n\t}\n\n}\n","import { PercentChart, IPercentChartPrivate, IPercentChartSettings } from \"../percent/PercentChart\";\nimport type { PercentSeries } from \"../percent/PercentSeries\";\n\n\nexport interface ISlicedChartSettings extends IPercentChartSettings {\n}\n\nexport interface ISlicedChartPrivate extends IPercentChartPrivate {\n}\n\n/**\n * Creates a sliced chart for use with [[FunnelSeries]], [[PyramidSeries]], or [[PictorialStackedSeries]].\n *\n * @see {@link https://www.amcharts.com/docs/v5/charts/percent-charts/pie-chart/} for more info\n * @important\n */\nexport class SlicedChart extends PercentChart {\n\tprotected _afterNew() {\n\t\tsuper._afterNew();\n\n\t\tthis.seriesContainer.setAll({ isMeasured:true, layout: this._root.horizontalLayout });\n\t}\n\n\tpublic static className: string = \"SlicedChart\";\n\tpublic static classNames: Array<string> = PercentChart.classNames.concat([SlicedChart.className]);\n\n\tdeclare public _settings: ISlicedChartSettings;\n\tdeclare public _privateSettings: ISlicedChartPrivate;\n\tdeclare public _seriesType: PercentSeries;\n}\n","import * as m from \"./../../dist/es2015/percent.js\";\nexport const am5percent = m;"],"sourceRoot":""}